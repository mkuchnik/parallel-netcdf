$Id$

==============================================================================
Tasks immediately before a new release (in the following order)
==============================================================================
 1. Update the release version
    In file "configure.in", variable $PNETCDF_VERSION indicates the version.
    It is automatically generated from the 2nd argument of AC_INIT call.
    Revise that string to the right release version.  For example,

    AC_INIT([parallel-netcdf], [1.5.0.pre1], [parallel-netcdf@mcs.anl.gov])
                                ^^^^^^^^^^

 2. Update file "RELEASE_NOTES"
    Copy the contents of file "sneak_peek" into file "RELEASE_NOTES"
    Clear up file "sneak_peek" (reset all items to none) and
    add release version and date at the top of file "RELEASE_NOTES".

 3. Update the release date
    run command "svn commit" to get the svn property \$LastChangedDate\$
    updated. That string will be used as the release date.

    svn commit -m "set release date of version 1.5.0.pre1 to today"

 4. Create an SVN tag by running the below command to copy from the
    current trunk:

    svn copy https://svn.mcs.anl.gov/repos/parallel-netcdf/trunk \
             https://svn.mcs.anl.gov/repos/parallel-netcdf/tags/v1-5-0pre \
             -m "Tagging pre-release version 1.5.0.pre1"

 5. run command "autoreconf" to generate file "configure".

 6. run command "configure" to create Makefile at root directory, so we can
    run "make dist" to create the tar balls.

 7. run command "make dist" to produce two tar balls for PnetCDF release:
      parallel-netcdf-$(PNETCDF_VERSION).tar.gz
      parallel-netcdf-$(PNETCDF_VERSION).tar.bz2

 8. To generate an SHA1 checksum, run command:
    openssl sha1 parallel-netcdf-1.5.0.pre1.tar.gz

    command-line output:
    SHA1(parallel-netcdf-1.5.0.pre1.tar.gz)= 495d42f0a41abbd09d276262dce0f7c1c535968a

=====================================================
Convention of setting version numbers.
http://semver.org/
=====================================================

   Given a version number MAJOR.MINOR.PATCH, increment the:

   1. MAJOR version when you make incompatible API changes,
   2. MINOR version when you add functionality in a backwards-compatible
      manner, and
   3. PATCH version when you make backwards-compatible bug fixes.

   Additional labels for pre-release and build metadata are available as
   extensions to the MAJOR.MINOR.PATCH format.

=====================================================
Note on adding new MPI compiler candidates
=====================================================
 - In configure.in, check the following variables
      CANDIDATE_MPICC
      CANDIDATE_MPICXX
      CANDIDATE_MPIF77
      CANDIDATE_MPIF90
   To make configure command automatically detect MPI compilers,
   add any new MPI compiler names to the list of the above variables.


=====================================================
Note on autotools version
=====================================================
 - configure.in is developed based on autotools v2.59
   I, Wei-keng, tend to test it using v2.59, in case PnetCDF users have
   autotools as old as 2.59.

   However, 2.59 generates a buggy configure file and failed on processing
   libraries from linker command line when running on Carver @nersc

   For official release of PnetCDF, use a newer autotools to generate file
   configure.

=====================================================
Working on configure.in
=====================================================
 - Debugging: change the value of variable _DEBUG to yes
   This will print some messages for debugging purpose.

=====================================================
Conform with netCDF
=====================================================
 - PnetCDF uses the same following constants as netCDF
       data types: nc_type
       file open/create modes
       error codes
       (in principle, all constants should conform with netCDF)

 - Make sure file src/lib/pnetcdf.h.in is updated with the latest netCDF
   header

 - Similarly, check Fortran error codes defined as parameters in
       src/libf/pnetcdf.inc.in
       src/libf90/nf90_constants.f90
       src/libf90/nfmpi_constants.f90.in

 - PnetCDF error codes start in -250


===============================================================
config.guess, config.sub, install-sh in directory scripts
===============================================================
Copy config.guess, config.sub, and install-sh from GNU libtool.
http://www.gnu.org/software/libtool/


Or get the latest version by running the following commands.

wget -O config.guess 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD'

wget -O config.sub 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD'


===============================================================
Extra files used for idea development, not for release
===============================================================
This file "DEVELOPER_NOTES".

src/lib:
    varnx.m4
    varnx_api_header.m4
    varn_api_header.m4

src/libf:
    varn_external.m4
    varnx_external.m4
    createffiles

src/libf90:
    varn_interface.m4
    varnx_interface.m4

=====================================================
Note on adding new PnetCDF APIs
=====================================================
If a new PnetCDF API is created, please make sure we do the followings.
1. In src/lib
   the new APIs is declared in pnetcdf.h.in

2. If the new APIs have Fortran counterparts, their C declarations should
   be placed outside of the comment block marked with:
   /* Begin Skip Prototypes for Fortran binding */
   and
   /* End Skip Prototypes for Fortran binding */
   Otherwise, their declarations should be inside of the block.

3. In src/libf
   The new APIs should be declared in pnetcdf.inc.in
   and add their C-to-Fortran  file name in Makefile.in
   For example, API nfmpi_put_att() corresponds to file put_attf.c

4. In src/libf90
   The new APIs should be declared in visibility.f90 and/or api.f90.in
   their definition should be added in the right files. For example,
   nfmpi_inq_striping() is declared in api.f90.in
   nf90mpi_inq_striping() is declared in visibility.f90
   The definition of nf90mpi_inq_striping() is defined in file.f90 by
   calling nfmpi_inq_striping().

=====================================================
Note on debugging
=====================================================
1. Enable debugging option (--enable-debug) at the configure time can trace the
   usage of malloc and whether there is a malloc residue. All PnetCDF
   development should call NCI_Malloc, NCI_Calloc, NCI_Realloc, and NCI_Free,
   instead of malloc, calloc, realloc, and free. When adding a new test or
   example program, please add a check for any malloc residue at the end. This
   is to make sure PnetCDF proporly free up all malloc used internally. The
   code fragment is something like below.

    /* check if there is any PnetCDF internal malloc residue */
    MPI_Offset malloc_size, sum_size;
    int err = ncmpi_inq_malloc_size(&malloc_size);
    if (err == NC_NOERR) {
        MPI_Reduce(&malloc_size, &sum_size, 1, MPI_OFFSET, MPI_SUM, 0, MPI_COMM_WORLD);
        if (rank == 0 && sum_size > 0)
            printf("heap memory allocated by PnetCDF internally has %lld bytes yet to be freed\n",
                   sum_size);
    }


=====================================================
Note on adding a new error code
=====================================================
PnetCDF error codes start at -200 and the error codes for header/argument
inconsistency of any kind start at -250.
1. If the new error code is not related to data inconsistency, add the code to
   the end before -250
2. If the new error code is related to data inconsistency, add it to the end
   of -250 section and make sure the number is between NC_EMULTIDEFINE_FIRST
   and NC_EMULTIDEFINE_LAST in pnetcdf.h.in. Update NC_EMULTIDEFINE_LAST if
   necessary.
3. Again, check Fortran error codes defined as parameters in
       src/libf/pnetcdf.inc.in
       src/libf90/nf90_constants.f90
       src/libf90/nfmpi_constants.f90.in

