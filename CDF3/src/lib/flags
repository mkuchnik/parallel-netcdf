attr.c:		ap = &ncp->attrs;
attr.c:	else if(varid >= 0 && (long long int) varid < ncp->vars.nelems)
attr.c:		vpp = (NC_var **)ncp->vars.value;
dim.c:	if ((ncp->flags & NC_64BIT_OFFSET) && sizeof(off_t) > 4) {
dim.c:	} else if ((ncp->flags & NC_64BIT_OFFSET) && sizeof(off_t) > 4) {
dim.c:		dimid = ncmpii_find_NC_Udim(&ncp->dims, &dimp);
dim.c:	if(ncp->dims.nelems >= NC_MAX_DIMS)
dim.c:	dimid = NC_finddim(&ncp->dims, name, &dimp);
dim.c:	status = incr_NC_dimarray(&ncp->dims, dimp);
dim.c:		*dimidp = (int)ncp->dims.nelems -1;
dim.c:	dimid = NC_finddim(&ncp->dims, name, NULL);
dim.c:	dimp = ncmpii_elem_NC_dimarray(&ncp->dims, (long long int)dimid);
dim.c:	dimp = ncmpii_elem_NC_dimarray(&ncp->dims, (long long int)dimid);
dim.c:	dimp = ncmpii_elem_NC_dimarray(&ncp->dims, (long long int)dimid);
dim.c:	existid = NC_finddim(&ncp->dims, newname, &dimp);
dim.c:	dimp = ncmpii_elem_NC_dimarray(&ncp->dims, (long long int)dimid);
dimids:mpinetcdf.c:        if (ncp->recsize <= varp->len) {
dimids:mpinetcdf.c:	    MPI_Type_hvector(subcount[0], varp->xsz, ncp->recsize,
dimids:mpinetcdf.c:	    MPI_Type_create_hvector(subcount[0], varp->xsz, ncp->recsize,
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
dimids:mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
header.c: * Sets ncp->begin_var to start of first variable.
header.c: * Sets ncp->begin_rec to start of first record variable.
header.c:        NC_var **vpp = (NC_var **)ncp->vars.value;
header.c:        NC_var *const *const end = &vpp[ncp->vars.nelems];
header.c:        ncp->begin_var = (off_t) ncp->xsz;
header.c:        ncp->begin_rec = (off_t) ncp->xsz;
header.c:        ncp->recsize = 0;
header.c:        if(ncp->vars.nelems == 0)
header.c:                status = ncmpii_NC_var_shape64(*vpp, &ncp->dims);
header.c:                status = ncmpii_NC_var_shape(*vpp, &ncp->dims);
header.c:                        ncp->recsize += (*vpp)->len;
header.c:                        ncp->begin_rec = (*vpp)->begin + (off_t)(*vpp)->len;
header.c:                assert(ncp->begin_rec <= first_rec->begin);
header.c:                ncp->begin_rec = first_rec->begin;
header.c:                if(ncp->recsize == first_rec->len)
header.c:                        ncp->recsize = *first_rec->dsizes * first_rec->xsz;
header.c:                ncp->begin_var = first_var->begin;
header.c:                ncp->begin_var = ncp->begin_rec;
header.c:        assert(ncp->begin_var > 0);
header.c:        assert(ncp->xsz <= ncp->begin_var);
header.c:        assert(ncp->begin_rec > 0);
header.c:        assert(ncp->begin_var <= ncp->begin_rec);
header.c:	if (fIsSet(ncp->flags, NC_64BIT_DATA)) {
header.c:                xlen += hdr_len_NC_dimarray(&ncp->dims, 8);/* int-> long????????*/
header.c:                xlen += hdr_len_NC_attrarray(&ncp->attrs, 8);
header.c:                xlen += hdr_len_NC_vararray(&ncp->vars, sizeof_off_t, 8);
header.c:                xlen += hdr_len_NC_dimarray(&ncp->dims, 4);
header.c:                xlen += hdr_len_NC_attrarray(&ncp->attrs, 4);
header.c:                xlen += hdr_len_NC_vararray(&ncp->vars, sizeof_off_t, 4);
header.c://        xlen += hdr_len_NC_dimarray(&ncp->dims, sizeof_off_t);/* int-> long????????*/
header.c:  putbuf.size = ncp->xsz;
header.c:  if (ncp->flags & NC_64BIT_DATA)
header.c:  else if (ncp->flags & NC_64BIT_OFFSET)
header.c:  nrecs = ncp->numrecs; 
header.c:  printf("put ncp->numrecs:%d\n", ncp->numrecs);
header.c:  status = hdr_put_NC_dimarray(&putbuf, &ncp->dims);
header.c:  status = hdr_put_NC_attrarray(&putbuf, &ncp->attrs); 
header.c:  status = hdr_put_NC_vararray(&putbuf, &ncp->vars);
header.c:  getbuf.nciop = ncp->nciop;
header.c:  getbuf.size = _RNDUP( MAX(MIN_NC_XSZ, ncp->chunk), X_ALIGN );
header.c:	  fSet(ncp->flags, NC_64BIT_OFFSET);
header.c:	  fSet(ncp->flags, NC_64BIT_DATA);
header.c:  printf("fIsSet(ncp->flags, NC_64BIT_DATA):%d\n", fIsSet(ncp->flags, NC_64BIT_DATA));
header.c:  printf("fIsSet(ncp->flags, NC_64BIT_OFFSET):%d\n", fIsSet(ncp->flags, NC_64BIT_OFFSET));
header.c:  ncp->numrecs = nrecs;
header.c:  status = hdr_get_NC_dimarray(&getbuf, &ncp->dims);
header.c:  printf("ncp->dims.nelems:%ld\n", ncp->dims.nelems);
header.c:  status = hdr_get_NC_attrarray(&getbuf, &ncp->attrs); 
header.c:  printf("ncp->vars.attrs.nelems:%ld\n", ncp->attrs.nelems);
header.c:  status = hdr_get_NC_vararray(&getbuf, &ncp->vars);
header.c:  printf("ncp->vars.nelems:%ld\n", ncp->vars.nelems);
header.c:  ncp->xsz = ncmpii_hdr_len_NC(ncp, (getbuf.version == 1) ? 4 : 8 );
header.c:  printf("----------ncp->xsz:%d\n", ncp->xsz);
header.c.64: * Sets ncp->begin_var to start of first variable.
header.c.64: * Sets ncp->begin_rec to start of first record variable.
header.c.64:        NC_var **vpp = (NC_var **)ncp->vars.value;
header.c.64:        NC_var *const *const end = &vpp[ncp->vars.nelems];
header.c.64:        ncp->begin_var = (off_t) ncp->xsz;
header.c.64:        ncp->begin_rec = (off_t) ncp->xsz;
header.c.64:        ncp->recsize = 0;
header.c.64:        if(ncp->vars.nelems == 0)
header.c.64:                status = ncmpii_NC_var_shape(*vpp, &ncp->dims);
header.c.64:                        ncp->recsize += (*vpp)->len;
header.c.64:                        ncp->begin_rec = (*vpp)->begin + (off_t)(*vpp)->len;
header.c.64:                assert(ncp->begin_rec <= first_rec->begin);
header.c.64:                ncp->begin_rec = first_rec->begin;
header.c.64:                if(ncp->recsize == first_rec->len)
header.c.64:                        ncp->recsize = *first_rec->dsizes * first_rec->xsz;
header.c.64:                ncp->begin_var = first_var->begin;
header.c.64:                ncp->begin_var = ncp->begin_rec;
header.c.64:        assert(ncp->begin_var > 0);
header.c.64:        assert(ncp->xsz <= ncp->begin_var);
header.c.64:        assert(ncp->begin_rec > 0);
header.c.64:        assert(ncp->begin_var <= ncp->begin_rec);
header.c.64:	if (fIsSet(ncp->flags, NC_64BIT_DATA)) {
header.c.64:                xlen += hdr_len_NC_dimarray(&ncp->dims, 8);/* int-> long????????*/
header.c.64:                xlen += hdr_len_NC_attrarray(&ncp->attrs, 8);
header.c.64:                xlen += hdr_len_NC_vararray(&ncp->vars, sizeof_off_t, 8);
header.c.64:                xlen += hdr_len_NC_dimarray(&ncp->dims, 4);/* int-> long????????*/
header.c.64:                xlen += hdr_len_NC_attrarray(&ncp->attrs, 4);
header.c.64:                xlen += hdr_len_NC_vararray(&ncp->vars, sizeof_off_t, 4);
header.c.64://        xlen += hdr_len_NC_dimarray(&ncp->dims, sizeof_off_t);/* int-> long????????*/
header.c.64:  putbuf.size = ncp->xsz;
header.c.64:  if (ncp->flags & NC_64BIT_OFFSET)
header.c.64:  nrecs = ncp->numrecs; 
header.c.64:  status = hdr_put_NC_dimarray(&putbuf, &ncp->dims);
header.c.64:  status = hdr_put_NC_attrarray(&putbuf, &ncp->attrs); 
header.c.64:  status = hdr_put_NC_vararray(&putbuf, &ncp->vars);
header.c.64:  getbuf.nciop = ncp->nciop;
header.c.64:  getbuf.size = _RNDUP( MAX(MIN_NC_XSZ, ncp->chunk), X_ALIGN );
header.c.64:	  fSet(ncp->flags, NC_64BIT_OFFSET);
header.c.64:  ncp->numrecs = nrecs;
header.c.64:  status = hdr_get_NC_dimarray(&getbuf, &ncp->dims);
header.c.64:  status = hdr_get_NC_attrarray(&getbuf, &ncp->attrs); 
header.c.64:  status = hdr_get_NC_vararray(&getbuf, &ncp->vars);
header.c.64:  ncp->xsz = ncmpii_hdr_len_NC(ncp, (getbuf.version == 1) ? 4 : 8 );
Binary file header.o matches
Binary file libpnetcdf.a matches
mpinetcdf.c:  assert(ncp->flags == 0);
mpinetcdf.c:	  fSet(ncp->flags, NC_64BIT_OFFSET);
mpinetcdf.c:	  fSet(ncp->flags, NC_64BIT_DATA);
mpinetcdf.c:  assert(ncp->xsz = ncmpii_hdr_len_NC(ncp, sizeof_off_t));
mpinetcdf.c:  fSet(ncp->flags, NC_NOFILL);
mpinetcdf.c:  fSet(ncp->flags, NC_HSYNC);
mpinetcdf.c:  status = ncmpiio_create(comm, path, cmode, info, &ncp->nciop);  
mpinetcdf.c:  fSet(ncp->flags, NC_CREAT);
mpinetcdf.c:  if(fIsSet(ncp->nciop->ioflags, NC_SHARE)) {
mpinetcdf.c:    fSet(ncp->flags, NC_NSYNC);
mpinetcdf.c:  *ncidp = ncp->nciop->fd;
mpinetcdf.c:  status = ncmpiio_open(comm, path, omode, info, &ncp->nciop);
mpinetcdf.c:  assert(ncp->flags == 0); 
mpinetcdf.c:  if(fIsSet(ncp->nciop->ioflags, NC_SHARE)) {
mpinetcdf.c:    fSet(ncp->flags, NC_NSYNC);
mpinetcdf.c:    ncmpiio_close(ncp->nciop, 0);
mpinetcdf.c:  *ncidp = ncp->nciop->fd;
mpinetcdf.c:  mpireturn = MPI_File_get_info(ncp->nciop->collective_fh, info_used);
mpinetcdf.c:      MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  if(fIsSet(ncp->nciop->ioflags, NC_SHARE)) {
mpinetcdf.c:    mynumrecs = ncp->numrecs;
mpinetcdf.c:    MPI_Allreduce(&mynumrecs, &numrecs, 1, MPI_INT, MPI_MAX, ncp->nciop->comm);
mpinetcdf.c:    if (numrecs > ncp->numrecs) {
mpinetcdf.c:      ncp->numrecs = numrecs;
mpinetcdf.c:  ncp->old = ncmpii_dup_NC(ncp);
mpinetcdf.c:  if(ncp->old == NULL)
mpinetcdf.c:  fSet(ncp->flags, NC_INDEF);
mpinetcdf.c:  if(!NC_readonly(ncp) && NC_collectiveFhOpened(ncp->nciop)) {
mpinetcdf.c:    mpireturn = MPI_File_sync(ncp->nciop->collective_fh);   /* collective */
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  fSet(ncp->flags, NC_INDEP);
mpinetcdf.c:  MPI_Barrier(ncp->nciop->comm);
mpinetcdf.c:  if(!NC_readonly(ncp) && NC_independentFhOpened(ncp->nciop)) {
mpinetcdf.c:    mpireturn = MPI_File_sync(ncp->nciop->independent_fh); /* independent */
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  fClr(ncp->flags, NC_INDEP);
mpinetcdf.c:  MPI_Barrier(ncp->nciop->comm);
mpinetcdf.c:  printf("ncmpi_enddef ncp->numrecs:%d\n", ncp->numrecs);
mpinetcdf.c:  return ncmpiio_sync(ncp->nciop);
mpinetcdf.c:  if (ncp->old != NULL) {
mpinetcdf.c:    assert(fIsSet(ncp->flags, NC_INDEF));
mpinetcdf.c:    ncmpii_free_NC(ncp->old);
mpinetcdf.c:    ncp->old = NULL;
mpinetcdf.c:    fClr(ncp->flags, NC_INDEF);
mpinetcdf.c:  (void) ncmpiio_close(ncp->nciop, doUnlink);
mpinetcdf.c:  ncp->nciop = NULL;
mpinetcdf.c:  if ( (collective && !NC_collectiveFhOpened(ncp->nciop)) 
mpinetcdf.c:    || (!collective && !NC_independentFhOpened(ncp->nciop)) ) {
mpinetcdf.c:    mpireturn = MPI_File_open(comm, (char *)ncp->nciop->path, ncp->nciop->mpiomode,
mpinetcdf.c:                              ncp->nciop->mpiinfo, mpifh);
mpinetcdf.c:      set_NC_collectiveFh(ncp->nciop);
mpinetcdf.c:      set_NC_independentFh(ncp->nciop);
mpinetcdf.c:                if(NC_readonly(ncp) && *coord >= ncp->numrecs)
mpinetcdf.c:                                if(*coord >= ncp->numrecs)
mpinetcdf.c:      offset += index[0] * ncp->recsize;
mpinetcdf.c:  mpireturn = MPI_File_set_view(*mpifh, offset, MPI_BYTE, MPI_BYTE, "native", ncp->nciop->mpiinfo);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    mpireturn = MPI_File_set_view(*mpifh, offset, MPI_BYTE, MPI_BYTE, "native", ncp->nciop->mpiinfo);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    stride = ncp->recsize;
mpinetcdf.c:    if (ncp->numrecs == 0)
mpinetcdf.c:    MPI_Type_hvector(ncp->numrecs, blocklen, stride, MPI_BYTE, &filetype);
mpinetcdf.c:    MPI_Type_create_hvector(ncp->numrecs, blocklen, stride, MPI_BYTE, &filetype);
mpinetcdf.c:    mpireturn = MPI_File_set_view(*mpifh, offset, MPI_BYTE, filetype, "native", ncp->nciop->mpiinfo);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:        if (ncp->recsize <= varp->len) {
mpinetcdf.c:          offset += start[0] * ncp->recsize;
mpinetcdf.c:          offset += start[0] * ncp->recsize;
mpinetcdf.c:	    MPI_Type_hvector(subcount[0], varp->xsz, ncp->recsize,
mpinetcdf.c:	    MPI_Type_create_hvector(subcount[0], varp->xsz, ncp->recsize,
mpinetcdf.c:	    MPI_Type_hvector(subcount[0], 1, ncp->recsize, rectype, &filetype);
mpinetcdf.c:	    MPI_Type_create_hvector(subcount[0], 1, ncp->recsize, rectype, &filetype);
mpinetcdf.c:		    filetype, "native", ncp->nciop->mpiinfo);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:        blockstride[ndims - 1] = stride[ndims - 1] * ncp->recsize;
mpinetcdf.c:        offset += start[ndims - 1] * ncp->recsize;
mpinetcdf.c:            blockstride[dim - 1] = stride[dim - 1] * ncp->recsize;
mpinetcdf.c:	    offset += start[dim-1] * ncp->recsize;
mpinetcdf.c:                    *filetype, "native", ncp->nciop->mpiinfo);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_var1_fileview(ncp, &(ncp->nciop->independent_fh), varp, index);
mpinetcdf.c:  mpireturn = MPI_File_write(ncp->nciop->independent_fh, xbuf, nbytes,
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_var1_fileview(ncp, &(ncp->nciop->independent_fh), varp, index);
mpinetcdf.c:  mpireturn = MPI_File_read(ncp->nciop->independent_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->collective_fh), ncp->nciop->comm, 1);
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:  status = set_var_fileview(ncp, &(ncp->nciop->collective_fh), varp);
mpinetcdf.c:  mpireturn = MPI_File_read_all(ncp->nciop->collective_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:  status = set_var_fileview(ncp, &(ncp->nciop->independent_fh), varp);
mpinetcdf.c:  mpireturn = MPI_File_write(ncp->nciop->independent_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:  status = set_var_fileview(ncp, &(ncp->nciop->independent_fh), varp);
mpinetcdf.c:  mpireturn = MPI_File_read(ncp->nciop->independent_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  comm = ncp->nciop->comm;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->collective_fh), comm, 1);
mpinetcdf.c:  status = set_vara_fileview(ncp, &(ncp->nciop->collective_fh), varp, start, count, 0);
mpinetcdf.c:  mpireturn = MPI_File_write_all(ncp->nciop->collective_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:      if (ncp->numrecs < max_numrecs) {
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:        ncp->numrecs = max_numrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->collective_fh), ncp->nciop->comm, 1);
mpinetcdf.c:  status = set_vara_fileview(ncp, &(ncp->nciop->collective_fh), varp, start, count, 1);
mpinetcdf.c:  mpireturn = MPI_File_read_all(ncp->nciop->collective_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_vara_fileview(ncp, &(ncp->nciop->independent_fh), varp, start, count, 0);
mpinetcdf.c:  mpireturn = MPI_File_write(ncp->nciop->independent_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_vara_fileview(ncp, &(ncp->nciop->independent_fh), varp, start, count, 1);
mpinetcdf.c:  mpireturn = MPI_File_read(ncp->nciop->independent_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  comm = ncp->nciop->comm;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->collective_fh), comm, 1);
mpinetcdf.c:  status = set_vars_fileview(ncp, &(ncp->nciop->collective_fh), 
mpinetcdf.c:  mpireturn = MPI_File_write_all(ncp->nciop->collective_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:      if (ncp->numrecs < max_numrecs) {
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:        ncp->numrecs = max_numrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->collective_fh), ncp->nciop->comm, 1);
mpinetcdf.c:  status = set_vars_fileview(ncp, &(ncp->nciop->collective_fh), 
mpinetcdf.c:  mpireturn = MPI_File_read_all(ncp->nciop->collective_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_vars_fileview(ncp, &(ncp->nciop->independent_fh),
mpinetcdf.c:  mpireturn = MPI_File_write(ncp->nciop->independent_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_vars_fileview(ncp, &(ncp->nciop->independent_fh),
mpinetcdf.c:  mpireturn = MPI_File_read(ncp->nciop->independent_fh, xbuf, nbytes, MPI_BYTE, &mpistatus);
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_var1_fileview(ncp, &(ncp->nciop->independent_fh), varp, index);
mpinetcdf.c:  mpireturn = MPI_File_iwrite(ncp->nciop->independent_fh, xbuf, nbytes,
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_var1_fileview(ncp, &(ncp->nciop->independent_fh), varp, index);
mpinetcdf.c:  mpireturn = MPI_File_iread(ncp->nciop->independent_fh, xbuf, 
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:  status = set_var_fileview(ncp, &(ncp->nciop->independent_fh), varp);
mpinetcdf.c:  mpireturn = MPI_File_iwrite(ncp->nciop->independent_fh, xbuf, 
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:  status = set_var_fileview(ncp, &(ncp->nciop->independent_fh), varp);
mpinetcdf.c:  mpireturn = MPI_File_iread(ncp->nciop->independent_fh, xbuf, 
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_vara_fileview(ncp, &(ncp->nciop->independent_fh), varp, start, count, 0);
mpinetcdf.c:  mpireturn = MPI_File_iwrite(ncp->nciop->independent_fh, xbuf, 
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_vara_fileview(ncp, &(ncp->nciop->independent_fh), varp, start, count, 1);
mpinetcdf.c:  mpireturn = MPI_File_iread(ncp->nciop->independent_fh, xbuf, 
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_vars_fileview(ncp, &(ncp->nciop->independent_fh),
mpinetcdf.c:  mpireturn = MPI_File_iwrite(ncp->nciop->independent_fh, xbuf, 
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    if (ncp->numrecs < newnumrecs) {
mpinetcdf.c:      ncp->numrecs = newnumrecs;
mpinetcdf.c:  status = check_mpifh(ncp, &(ncp->nciop->independent_fh), MPI_COMM_SELF, 0);
mpinetcdf.c:  status = set_vars_fileview(ncp, &(ncp->nciop->independent_fh),
mpinetcdf.c:  mpireturn = MPI_File_iread(ncp->nciop->independent_fh, xbuf, 
mpinetcdf.c:        MPI_Comm_rank(ncp->nciop->comm, &rank);
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:    nelems = ncp->numrecs;
Binary file mpinetcdf.o matches
nc.c:	ncp->prev = NULL;
nc.c:	ncp->next = NClist;
nc.c:		assert(ncp->prev == NULL);
nc.c:		NClist = ncp->next;
nc.c:		assert(ncp->prev != NULL);
nc.c:		ncp->prev->next = ncp->next;
nc.c:	if(ncp->next != NULL)
nc.c:		ncp->next->prev = ncp->prev;
nc.c:	ncp->next = NULL;
nc.c:	ncp->prev = NULL;
nc.c:		for(ncp = NClist; ncp != NULL; ncp = ncp->next)
nc.c:			if(ncp->nciop->fd == ncid)
nc.c:	ncmpii_free_NC_dimarrayV(&ncp->dims);
nc.c:	ncmpii_free_NC_attrarrayV(&ncp->attrs);
nc.c:	ncmpii_free_NC_vararrayV(&ncp->vars);
nc.c:	if (fIsSet(ncp->flags, NC_64BIT_DATA)) {
nc.c:		ncp->xsz = MIN_NC_XSZ+28; /*Kgao*/
nc.c:		ncp->xsz = MIN_NC_XSZ; 
nc.c:	assert(ncp->xsz == ncmpii_hdr_len_NC(ncp, 0)); 
nc.c:	ncp->chunk = chunkp != NULL ? *chunkp : NC_SIZEHINT_DEFAULT;
nc.c:	if(ncmpii_dup_NC_dimarrayV(&ncp->dims, &ref->dims) != NC_NOERR)
nc.c:	if(ncmpii_dup_NC_attrarrayV(&ncp->attrs, &ref->attrs) != NC_NOERR)
nc.c:	if(ncmpii_dup_NC_vararrayV(&ncp->vars, &ref->vars) != NC_NOERR)
nc.c:	ncp->xsz = ref->xsz;
nc.c:	ncp->begin_var = ref->begin_var;
nc.c:	ncp->begin_rec = ref->begin_rec;
nc.c:	ncp->recsize = ref->recsize;
nc.c:		v_align = ncp->chunk;
nc.c:		r_align = ncp->chunk;
nc.c:	if ((fIsSet(ncp->flags, NC_64BIT_OFFSET))||(fIsSet(ncp->flags, NC_64BIT_DATA))) {
nc.c:	ncp->xsz = ncmpii_hdr_len_NC(ncp, sizeof_off_t);
nc.c:	if(ncp->vars.nelems == 0) 
nc.c:	if (ncp->begin_var < ncp->xsz + h_minfree ||
nc.c:	    ncp->begin_var != D_RNDUP(ncp->begin_var, v_align) ) 
nc.c:	  index = (off_t) ncp->xsz;
nc.c:	  ncp->begin_var = D_RNDUP(index, v_align);
nc.c:	  if(ncp->begin_var < index + h_minfree)
nc.c:	    ncp->begin_var = D_RNDUP(index + (off_t)h_minfree, v_align);
nc.c:	index = ncp->begin_var;
nc.c:	vpp = ncp->vars.value;
nc.c:	for(ii = 0; ii < ncp->vars.nelems ; ii++, vpp++)
nc.c:	if (ncp->begin_rec < index + v_minfree ||
nc.c:	    ncp->begin_rec != D_RNDUP(ncp->begin_rec, r_align) )
nc.c:	  ncp->begin_rec = D_RNDUP(index, r_align);
nc.c:	  if(ncp->begin_rec < index + v_minfree)
nc.c:	    ncp->begin_rec = D_RNDUP(index + (off_t)v_minfree, r_align);
nc.c:	index = ncp->begin_rec;
nc.c:	ncp->recsize = 0;
nc.c:	vpp = (NC_var **)ncp->vars.value;
nc.c:	for(ii = 0; ii < ncp->vars.nelems; ii++, vpp++)
nc.c:		if (ncp->recsize > X_UINT_MAX - (*vpp)->len)
nc.c:		ncp->recsize += (*vpp)->len;
nc.c:	if(last != NULL && ncp->recsize == last->len)
nc.c:		ncp->recsize = *last->dsizes * last->xsz;
nc.c:  MPI_Comm_rank(ncp->nciop->comm, &rank);
nc.c:  if (fIsSet(ncp->flags, NC_64BIT_DATA)) {
nc.c:  mpireturn = MPI_File_set_view(ncp->nciop->collective_fh, 0, MPI_BYTE,
nc.c:                    MPI_BYTE, "native", ncp->nciop->mpiinfo);
nc.c:  if (fIsSet(ncp->flags, NC_64BIT_DATA)) {
nc.c: 	mpireturn = MPI_File_read_at(ncp->nciop->collective_fh, NC_NUMRECS_OFFSET+4,
nc.c: 	mpireturn = MPI_File_read_at(ncp->nciop->collective_fh, NC_NUMRECS_OFFSET,
nc.c:  ncp->numrecs = nrecs;
nc.c:  comm = ncp->nciop->comm;
nc.c:  nrecs = ncp->numrecs;
nc.c:  if (ncp->flags & NC_64BIT_DATA){
nc.c:  if(NC_indep(ncp) && NC_independentFhOpened(ncp->nciop)) {
nc.c:    mpireturn = MPI_File_sync(ncp->nciop->independent_fh);
nc.c:  mpireturn = MPI_File_set_view(ncp->nciop->collective_fh, 0, MPI_BYTE, 
nc.c:		    MPI_BYTE, "native", ncp->nciop->mpiinfo);
nc.c:    if (ncp->flags & NC_64BIT_DATA){
nc.c:    	mpireturn = MPI_File_write_at(ncp->nciop->collective_fh, NC_NUMRECS_OFFSET,
nc.c:    	mpireturn = MPI_File_write_at(ncp->nciop->collective_fh, NC_NUMRECS_OFFSET,
nc.c:    mpireturn = MPI_File_sync(ncp->nciop->collective_fh); 
nc.c:    fClr(ncp->flags, NC_NDIRTY);  
nc.c:  ncmpii_free_NC_dimarrayV(&ncp->dims);
nc.c:  ncmpii_free_NC_attrarrayV(&ncp->attrs);
nc.c:  ncmpii_free_NC_vararrayV(&ncp->vars); 
nc.c:    fClr(ncp->flags, NC_NDIRTY | NC_HDIRTY);
nc.c:  MPI_Comm_rank(ncp->nciop->comm, &rank);
nc.c:  printf("write_NC ncp->numrecs:%d\n", ncp->numrecs);
nc.c:  buf = (void *)malloc(ncp->xsz);
nc.c://  for (i=0; i<ncp->xsz; i++)
nc.c:  status = NC_check_def(ncp->nciop->comm, buf, ncp->xsz);
nc.c:  mpireturn = MPI_File_set_view(ncp->nciop->collective_fh, 0, MPI_BYTE,
nc.c:                    MPI_BYTE, "native", ncp->nciop->mpiinfo);
nc.c:    mpireturn = MPI_File_write_at(ncp->nciop->collective_fh, 0, buf, 
nc.c:			          ncp->xsz, MPI_BYTE, &mpistatus);
nc.c:  MPI_Bcast(&mpireturn, 1, MPI_INT, 0, ncp->nciop->comm);
nc.c:  fClr(ncp->flags, NC_NDIRTY | NC_HDIRTY);
nc.c:  mynumrecs = ncp->numrecs;
nc.c:  MPI_Allreduce(&mynumrecs, &numrecs, 1, MPI_INT, MPI_MAX, ncp->nciop->comm);
nc.c:  if (numrecs > ncp->numrecs) {
nc.c:    ncp->numrecs = numrecs;
nc.c:  ncp->numrecs = old->numrecs;
nc.c:  return ncmpiio_move(ncp->nciop, ncp->begin_var, old->begin_var, 
nc.c:  const long long int ncp_recsize = ncp->recsize;
nc.c:  const off_t ncp_off = ncp->begin_rec;
nc.c:    status = ncmpiio_move(ncp->nciop, ncp_off, old_off, 
nc.c:      status = ncmpiio_move(ncp->nciop, 
nc.c:  ncp->numrecs = old_nrecs;
nc.c:  return ncmpiio_move(ncp->nciop, ncp->begin_var, old->begin_var, 
nc.c:    if(ncp->vars.nelems == 0) 
nc.c:    if ((ncp->flags & NC_64BIT_OFFSET) && sizeof(off_t) > 4) {
nc.c:    } else if ((ncp->flags & NC_64BIT_DATA) && sizeof(off_t) > 4) {
nc.c:    vpp = ncp->vars.value;
nc.c:    for (ii = 0; ii < ncp->vars.nelems; ii++, vpp++) {
nc.c:       vpp = ncp->vars.value;
nc.c:       for (ii = 0; ii < ncp->vars.nelems; ii++, vpp++) {
nc.c:  printf("ncmpii_NC_enddef ncp->numrecs:%d\n", ncp->numrecs);
nc.c:  comm = ncp->nciop->comm;
nc.c:  if(ncp->old != NULL) {
nc.c:    assert(fIsSet(ncp->flags, NC_INDEF));
nc.c:    assert(ncp->begin_rec >= ncp->old->begin_rec);
nc.c:    assert(ncp->begin_var >= ncp->old->begin_var);
nc.c:    assert(ncp->vars.nelems >= ncp->old->vars.nelems);
nc.c:    mpireturn = MPI_File_sync(ncp->nciop->collective_fh);
nc.c:    if(ncp->vars.nelems != 0) {
nc.c:      if(ncp->begin_rec > ncp->old->begin_rec) {
nc.c:        if (ncp->vars.nelems == ncp->old->vars.nelems) {
nc.c:          status = move_data_r(ncp, ncp->old);
nc.c:          status = move_recs_r(ncp, ncp->old);
nc.c:          if(ncp->begin_var > ncp->old->begin_var) {
nc.c:            status = move_vars_r(ncp, ncp->old);
nc.c:      } else { /* ... ncp->begin_rec > ncp->old->begin_rec */
nc.c:        /* Even if (ncp->begin_rec == ncp->old->begin_rec)
nc.c:         * and     (ncp->begin_var == ncp->old->begin_var)
nc.c:        if(ncp->recsize > ncp->old->recsize) {
nc.c:          status = move_recs_r(ncp, ncp->old);
nc.c:  } /* ... ncp->old != NULL */
nc.c:  if(ncp->old != NULL) {
nc.c:    ncmpii_free_NC(ncp->old);
nc.c:    ncp->old = NULL;
nc.c:  fClr(ncp->flags, NC_CREAT | NC_INDEF);
nc.c:  mpireturn = MPI_File_sync(ncp->nciop->collective_fh);
nc.c:  if(ncp->old != NULL)
nc.c:    ncmpii_free_NC(ncp->old);
nc.c:    ncp->old = NULL;
nc.c:  fClr(ncp->flags, NC_CREAT | NC_INDEF);
nc.c:      if (ncp->old != NULL) {
nc.c:        ncmpii_free_NC(ncp->old);
nc.c:        ncp->old = NULL;
nc.c:        fClr(ncp->flags, NC_INDEF);
nc.c:  (void) ncmpiio_close(ncp->nciop, 0);
nc.c:  ncp->nciop = NULL;
nc.c:		*ndimsp = (long long int) ncp->dims.nelems;
nc.c:		*nvarsp = (long long int) ncp->vars.nelems;
nc.c:		*nattsp = (long long int) ncp->attrs.nelems;
nc.c:		*xtendimp = ncmpii_find_NC_Udim(&ncp->dims, NULL);
nc.c:	printf("ncmpi_inq_version fIsSet(ncp->flags, NC_64BIT_DATA):%d\n", fIsSet(ncp->flags, NC_64BIT_DATA));
nc.c:	printf("ncmpi_inq_version fIsSet(ncp->flags, NC_64BIT_OFFSET):%d\n", fIsSet(ncp->flags, NC_64BIT_OFFSET));
nc.c:       if (fIsSet(ncp->flags, NC_64BIT_DATA)) {
nc.c:       } else if (fIsSet(ncp->flags, NC_64BIT_OFFSET)) {
nc.c:		*ndimsp = (long long int) ncp->dims.nelems;
nc.c:		*nvarsp = (long long int) ncp->vars.nelems;
nc.c:		*nattsp = (long long int) ncp->attrs.nelems;
nc.c:		*xtendimp = ncmpii_find_NC_Udim(&ncp->dims, NULL);
nc.c:	return ncp->nciop->sync(ncp->nciop);
nc.c:	oldmode = fIsSet(ncp->flags, NC_NOFILL) ? NC_NOFILL : NC_FILL;
nc.c:		fSet(ncp->flags, NC_NOFILL);
nc.c:		if(fIsSet(ncp->flags, NC_NOFILL))
nc.c:		fClr(ncp->flags, NC_NOFILL);
nc.c.64:	ncp->prev = NULL;
nc.c.64:	ncp->next = NClist;
nc.c.64:		assert(ncp->prev == NULL);
nc.c.64:		NClist = ncp->next;
nc.c.64:		assert(ncp->prev != NULL);
nc.c.64:		ncp->prev->next = ncp->next;
nc.c.64:	if(ncp->next != NULL)
nc.c.64:		ncp->next->prev = ncp->prev;
nc.c.64:	ncp->next = NULL;
nc.c.64:	ncp->prev = NULL;
nc.c.64:		for(ncp = NClist; ncp != NULL; ncp = ncp->next)
nc.c.64:			if(ncp->nciop->fd == ncid)
nc.c.64:	ncmpii_free_NC_dimarrayV(&ncp->dims);
nc.c.64:	ncmpii_free_NC_attrarrayV(&ncp->attrs);
nc.c.64:	ncmpii_free_NC_vararrayV(&ncp->vars);
nc.c.64:	if (fIsSet(ncp->flags, NC_64BIT_DATA)) {
nc.c.64:		ncp->xsz = MIN_NC_XSZ+28; /*Kgao*/
nc.c.64:		ncp->xsz = MIN_NC_XSZ; 
nc.c.64:	assert(ncp->xsz == ncmpii_hdr_len_NC(ncp, 0)); 
nc.c.64:	ncp->chunk = chunkp != NULL ? *chunkp : NC_SIZEHINT_DEFAULT;
nc.c.64:	if(ncmpii_dup_NC_dimarrayV(&ncp->dims, &ref->dims) != NC_NOERR)
nc.c.64:	if(ncmpii_dup_NC_attrarrayV(&ncp->attrs, &ref->attrs) != NC_NOERR)
nc.c.64:	if(ncmpii_dup_NC_vararrayV(&ncp->vars, &ref->vars) != NC_NOERR)
nc.c.64:	ncp->xsz = ref->xsz;
nc.c.64:	ncp->begin_var = ref->begin_var;
nc.c.64:	ncp->begin_rec = ref->begin_rec;
nc.c.64:	ncp->recsize = ref->recsize;
nc.c.64:		v_align = ncp->chunk;
nc.c.64:		r_align = ncp->chunk;
nc.c.64:	if (fIsSet(ncp->flags, NC_64BIT_OFFSET)) {
nc.c.64:	ncp->xsz = ncmpii_hdr_len_NC(ncp, sizeof_off_t);
nc.c.64:	if(ncp->vars.nelems == 0) 
nc.c.64:	if (ncp->begin_var < ncp->xsz + h_minfree ||
nc.c.64:	    ncp->begin_var != D_RNDUP(ncp->begin_var, v_align) ) 
nc.c.64:	  index = (off_t) ncp->xsz;
nc.c.64:	  ncp->begin_var = D_RNDUP(index, v_align);
nc.c.64:	  if(ncp->begin_var < index + h_minfree)
nc.c.64:	    ncp->begin_var = D_RNDUP(index + (off_t)h_minfree, v_align);
nc.c.64:	index = ncp->begin_var;
nc.c.64:	vpp = ncp->vars.value;
nc.c.64:	for(ii = 0; ii < ncp->vars.nelems ; ii++, vpp++)
nc.c.64:	if (ncp->begin_rec < index + v_minfree ||
nc.c.64:	    ncp->begin_rec != D_RNDUP(ncp->begin_rec, r_align) )
nc.c.64:	  ncp->begin_rec = D_RNDUP(index, r_align);
nc.c.64:	  if(ncp->begin_rec < index + v_minfree)
nc.c.64:	    ncp->begin_rec = D_RNDUP(index + (off_t)v_minfree, r_align);
nc.c.64:	index = ncp->begin_rec;
nc.c.64:	ncp->recsize = 0;
nc.c.64:	vpp = (NC_var **)ncp->vars.value;
nc.c.64:	for(ii = 0; ii < ncp->vars.nelems; ii++, vpp++)
nc.c.64:		if (ncp->recsize > X_UINT_MAX - (*vpp)->len)
nc.c.64:		ncp->recsize += (*vpp)->len;
nc.c.64:	if(last != NULL && ncp->recsize == last->len)
nc.c.64:		ncp->recsize = *last->dsizes * last->xsz;
nc.c.64:  MPI_Comm_rank(ncp->nciop->comm, &rank);
nc.c.64:  mpireturn = MPI_File_set_view(ncp->nciop->collective_fh, 0, MPI_BYTE,
nc.c.64:                    MPI_BYTE, "native", ncp->nciop->mpiinfo);
nc.c.64:  mpireturn = MPI_File_read_at(ncp->nciop->collective_fh, NC_NUMRECS_OFFSET,
nc.c.64:  ncp->numrecs = nrecs;
nc.c.64:  comm = ncp->nciop->comm;
nc.c.64:  nrecs = ncp->numrecs;
nc.c.64:  if (ncp->flags & NC_64BIT_DATA){
nc.c.64:  if(NC_indep(ncp) && NC_independentFhOpened(ncp->nciop)) {
nc.c.64:    mpireturn = MPI_File_sync(ncp->nciop->independent_fh);
nc.c.64:  mpireturn = MPI_File_set_view(ncp->nciop->collective_fh, 0, MPI_BYTE, 
nc.c.64:		    MPI_BYTE, "native", ncp->nciop->mpiinfo);
nc.c.64:    if (ncp->flags & NC_64BIT_DATA){
nc.c.64:    	mpireturn = MPI_File_write_at(ncp->nciop->collective_fh, NC_NUMRECS_OFFSET,
nc.c.64:    	mpireturn = MPI_File_write_at(ncp->nciop->collective_fh, NC_NUMRECS_OFFSET,
nc.c.64:    mpireturn = MPI_File_sync(ncp->nciop->collective_fh); 
nc.c.64:    fClr(ncp->flags, NC_NDIRTY);  
nc.c.64:  ncmpii_free_NC_dimarrayV(&ncp->dims);
nc.c.64:  ncmpii_free_NC_attrarrayV(&ncp->attrs);
nc.c.64:  ncmpii_free_NC_vararrayV(&ncp->vars); 
nc.c.64:    fClr(ncp->flags, NC_NDIRTY | NC_HDIRTY);
nc.c.64:  MPI_Comm_rank(ncp->nciop->comm, &rank);
nc.c.64:  buf = (void *)malloc(ncp->xsz);
nc.c.64://  for (i=0; i<ncp->xsz; i++)
nc.c.64:  printf("write_NC ncp->xsz:%d\n", ncp->xsz);
nc.c.64:  status = NC_check_def(ncp->nciop->comm, buf, ncp->xsz);
nc.c.64:  mpireturn = MPI_File_set_view(ncp->nciop->collective_fh, 0, MPI_BYTE,
nc.c.64:                    MPI_BYTE, "native", ncp->nciop->mpiinfo);
nc.c.64:    mpireturn = MPI_File_write_at(ncp->nciop->collective_fh, 0, buf, 
nc.c.64:			          ncp->xsz, MPI_BYTE, &mpistatus);
nc.c.64:  MPI_Bcast(&mpireturn, 1, MPI_INT, 0, ncp->nciop->comm);
nc.c.64:  fClr(ncp->flags, NC_NDIRTY | NC_HDIRTY);
nc.c.64:  mynumrecs = ncp->numrecs;
nc.c.64:  MPI_Allreduce(&mynumrecs, &numrecs, 1, MPI_INT, MPI_MAX, ncp->nciop->comm);
nc.c.64:  if (numrecs > ncp->numrecs) {
nc.c.64:    ncp->numrecs = numrecs;
nc.c.64:  ncp->numrecs = old->numrecs;
nc.c.64:  return ncmpiio_move(ncp->nciop, ncp->begin_var, old->begin_var, 
nc.c.64:  const size_t ncp_recsize = ncp->recsize;
nc.c.64:  const off_t ncp_off = ncp->begin_rec;
nc.c.64:    status = ncmpiio_move(ncp->nciop, ncp_off, old_off, 
nc.c.64:      status = ncmpiio_move(ncp->nciop, 
nc.c.64:  ncp->numrecs = old_nrecs;
nc.c.64:  return ncmpiio_move(ncp->nciop, ncp->begin_var, old->begin_var, 
nc.c.64:    if(ncp->vars.nelems == 0) 
nc.c.64:    if ((ncp->flags & NC_64BIT_OFFSET) && sizeof(off_t) > 4) {
nc.c.64:    vpp = ncp->vars.value;
nc.c.64:    for (ii = 0; ii < ncp->vars.nelems; ii++, vpp++) {
nc.c.64:       vpp = ncp->vars.value;
nc.c.64:       for (ii = 0; ii < ncp->vars.nelems; ii++, vpp++) {
nc.c.64:  comm = ncp->nciop->comm;
nc.c.64:  if(ncp->old != NULL) {
nc.c.64:    assert(fIsSet(ncp->flags, NC_INDEF));
nc.c.64:    assert(ncp->begin_rec >= ncp->old->begin_rec);
nc.c.64:    assert(ncp->begin_var >= ncp->old->begin_var);
nc.c.64:    assert(ncp->vars.nelems >= ncp->old->vars.nelems);
nc.c.64:    mpireturn = MPI_File_sync(ncp->nciop->collective_fh);
nc.c.64:    if(ncp->vars.nelems != 0) {
nc.c.64:      if(ncp->begin_rec > ncp->old->begin_rec) {
nc.c.64:        if (ncp->vars.nelems == ncp->old->vars.nelems) {
nc.c.64:          status = move_data_r(ncp, ncp->old);
nc.c.64:          status = move_recs_r(ncp, ncp->old);
nc.c.64:          if(ncp->begin_var > ncp->old->begin_var) {
nc.c.64:            status = move_vars_r(ncp, ncp->old);
nc.c.64:      } else { /* ... ncp->begin_rec > ncp->old->begin_rec */
nc.c.64:        /* Even if (ncp->begin_rec == ncp->old->begin_rec)
nc.c.64:         * and     (ncp->begin_var == ncp->old->begin_var)
nc.c.64:        if(ncp->recsize > ncp->old->recsize) {
nc.c.64:          status = move_recs_r(ncp, ncp->old);
nc.c.64:  } /* ... ncp->old != NULL */
nc.c.64:  if(ncp->old != NULL) {
nc.c.64:    ncmpii_free_NC(ncp->old);
nc.c.64:    ncp->old = NULL;
nc.c.64:  fClr(ncp->flags, NC_CREAT | NC_INDEF);
nc.c.64:  mpireturn = MPI_File_sync(ncp->nciop->collective_fh);
nc.c.64:  if(ncp->old != NULL)
nc.c.64:    ncmpii_free_NC(ncp->old);
nc.c.64:    ncp->old = NULL;
nc.c.64:  fClr(ncp->flags, NC_CREAT | NC_INDEF);
nc.c.64:      if (ncp->old != NULL) {
nc.c.64:        ncmpii_free_NC(ncp->old);
nc.c.64:        ncp->old = NULL;
nc.c.64:        fClr(ncp->flags, NC_INDEF);
nc.c.64:  (void) ncmpiio_close(ncp->nciop, 0);
nc.c.64:  ncp->nciop = NULL;
nc.c.64:		*ndimsp = (int) ncp->dims.nelems;
nc.c.64:		*nvarsp = (int) ncp->vars.nelems;
nc.c.64:		*nattsp = (int) ncp->attrs.nelems;
nc.c.64:		*xtendimp = ncmpii_find_NC_Udim(&ncp->dims, NULL);
nc.c.64:		*ndimsp = (int) ncp->dims.nelems;
nc.c.64:		*nvarsp = (int) ncp->vars.nelems;
nc.c.64:		*nattsp = (int) ncp->attrs.nelems;
nc.c.64:		*xtendimp = ncmpii_find_NC_Udim(&ncp->dims, NULL);
nc.c.64:	return ncp->nciop->sync(ncp->nciop);
nc.c.64:	oldmode = fIsSet(ncp->flags, NC_NOFILL) ? NC_NOFILL : NC_FILL;
nc.c.64:		fSet(ncp->flags, NC_NOFILL);
nc.c.64:		if(fIsSet(ncp->flags, NC_NOFILL))
nc.c.64:		fClr(ncp->flags, NC_NOFILL);
nc.h: * The initial value of ncp->xsz.
nc.h:	(!fIsSet(ncp->nciop->ioflags, NC_WRITE))
Binary file nc.o matches
Binary file ncvalid matches
validator.c:  getbuf.nciop = ncp->nciop;
validator.c:  getbuf.size = _RNDUP( MAX(MIN_NC_XSZ, ncp->chunk), X_ALIGN );
validator.c:  ncp->numrecs = nrecs;
validator.c:  status = val_get_NC_dimarray(&getbuf, &ncp->dims);
validator.c:  status = val_get_NC_attrarray(&getbuf, &ncp->attrs); 
validator.c:  status = val_get_NC_vararray(&getbuf, &ncp->vars);
validator.c:  ncp->xsz = ncmpii_hdr_len_NC(ncp, (getbuf.version == 1 ? 4 : 8)); 
validator.c:  ncp->nciop = ncmpiio_new(ncfile, NC_NOWRITE);
validator.c:  if(ncp->nciop == NULL) {
validator.c:  if ( (*((int *)&ncp->nciop->fd) = open(ncfile, O_RDONLY)) < 0 ) {
validator.c:    ncmpiio_free(ncp->nciop);
validator.c:    close(ncp->nciop->fd);
validator.c:    ncmpiio_free(ncp->nciop);
validator.c:  fstat(ncp->nciop->fd, &ncfilestat);
validator.c:  if ( ncp->begin_rec + ncp->recsize * ncp->numrecs < ncfilestat.st_size ) {
validator.c:    close(ncp->nciop->fd);
validator.c:    ncmpiio_free(ncp->nciop);
validator.c:  } else if ( ncp->begin_rec + ncp->recsize * (ncp->numrecs - 1) >= ncfilestat.st_size ) {
validator.c:    close(ncp->nciop->fd);
validator.c:    ncmpiio_free(ncp->nciop);
validator.c:  close(ncp->nciop->fd);
validator.c:  ncmpiio_free(ncp->nciop);
var.c:	varp = elem_NC_vararray(&ncp->vars, (long long int)varid);
var.c:	if(ncp->vars.nelems >= NC_MAX_VARS)
var.c:	varid = ncmpii_NC_findvar(&ncp->vars, name, &varp);
var.c:	status = ncmpii_NC_var_shape(varp, &ncp->dims);
var.c:	status = incr_NC_vararray(&ncp->vars, varp);
var.c:		*varidp = (int)ncp->vars.nelems -1; /* varid */
var.c:	varid = ncmpii_NC_findvar(&ncp->vars, name, &varp);
var.c:	varp = elem_NC_vararray(&ncp->vars, (long long int)varid);
var.c:	varp = elem_NC_vararray(&ncp->vars, (long long int)varid);
var.c:	varp = elem_NC_vararray(&ncp->vars, (long long int)varid);
var.c:	varp = elem_NC_vararray(&ncp->vars, (long long int)varid);
var.c:	varp = elem_NC_vararray(&ncp->vars, (long long int)varid);
var.c:	varp = elem_NC_vararray(&ncp->vars, (long long int)varid);
var.c:	other = ncmpii_NC_findvar(&ncp->vars, newname, &varp);
