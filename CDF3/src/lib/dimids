header.c:        sz = hdr_len_NC_string(varp->name,sizeof_off_t);
header.c:		sz += ncmpix_len_long(varp->ndims); /* dimids */
header.c:		sz += ncmpix_len_int(varp->ndims); /* dimids */
header.c:        sz += hdr_len_NC_attrarray(&varp->attrs, sizeof_off_t);
header.c:  status = hdr_put_NC_string(pbp, varp->name);
header.c:  status = ncmpix_put_size_t(&pbp->pos, &varp->ndims, pbp->version == 3 ? 8 : 4);
header.c:  for (i=0; i< varp->ndims; i++){  
header.c:        const long long int dim_id  = (const long long int) varp->dimids[i];
header.c:                        varp->ndims, varp->dimids);
header.c:                        varp->ndims, varp->dimids);
header.c:  status = hdr_put_NC_attrarray(pbp, &varp->attrs);
header.c:  status = hdr_put_nc_type(pbp, &varp->type); 
header.c:  status = ncmpix_put_size_t(&pbp->pos, &varp->len, pbp->version == 3 ? 8 : 4); 
header.c:  status = ncmpix_put_off_t(&pbp->pos, &varp->begin, pbp->version == 1 ? 4 : 8);
header.c:                              1, varp->dimids + dim);
header.c:  status = hdr_get_NC_attrarray(gbp, &varp->attrs);
header.c:  status = hdr_get_nc_type(gbp, &varp->type);
header.c:  status = hdr_get_size_t(gbp, &varp->len);
header.c:                        &varp->begin, (gbp->version == 1 ? 4 : 8));
header.c.64:        sz = hdr_len_NC_string(varp->name,sizeof_off_t);
header.c.64:		sz += ncmpix_len_long(varp->ndims); /* dimids */
header.c.64:		sz += ncmpix_len_int(varp->ndims); /* dimids */
header.c.64:        sz += hdr_len_NC_attrarray(&varp->attrs, sizeof_off_t);
header.c.64:  status = hdr_put_NC_string(pbp, varp->name);
header.c.64:  status = ncmpix_put_size_t(&pbp->pos, &varp->ndims, pbp->version == 3 ? 8 : 4);
header.c.64:  for (i=0; i< varp->ndims; i++){  
header.c.64:        const size_t dim_id  = (const size_t) varp->dimids[i];
header.c.64:                        varp->ndims, varp->dimids);
header.c.64:                        varp->ndims, varp->dimids);
header.c.64:  status = hdr_put_NC_attrarray(pbp, &varp->attrs);
header.c.64:  status = hdr_put_nc_type(pbp, &varp->type); 
header.c.64:  status = ncmpix_put_size_t(&pbp->pos, &varp->len, pbp->version == 3 ? 8 : 4); 
header.c.64:  status = ncmpix_put_off_t(&pbp->pos, &varp->begin, pbp->version == 1 ? 4 : 8);
header.c.64:                              1, varp->dimids + dim);
header.c.64:  status = hdr_get_NC_attrarray(gbp, &varp->attrs);
header.c.64:  status = hdr_get_nc_type(gbp, &varp->type);
header.c.64:  status = hdr_get_size_t(gbp, &varp->len);
header.c.64:                        &varp->begin, (gbp->version == 1 ? 4 : 8));
mpinetcdf.c:        if(varp->ndims == 0)
mpinetcdf.c:                up = varp->shape + 1;
mpinetcdf.c:                up = varp->shape;
mpinetcdf.c:        for(; ip < coord + varp->ndims; ip++, up++)
mpinetcdf.c:  const long long int *const end = start + varp->ndims;
mpinetcdf.c:  const long long int *shp = varp->shape;
mpinetcdf.c:  if(varp->ndims == 0)
mpinetcdf.c:  const long long int *const end = start + varp->ndims;
mpinetcdf.c:  const long long int *shp = varp->shape; /* use long long int for now :( */
mpinetcdf.c:  if(varp->ndims == 0)
mpinetcdf.c:  offset = varp->begin;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:      offset += index[ndims-1] * varp->xsz;
mpinetcdf.c:        offset += index[ndims - 1] * varp->xsz;
mpinetcdf.c:        offset += index[0] * varp->dsizes[1] * varp->xsz;
mpinetcdf.c:        offset += index[dim] * varp->dsizes[dim+1] * varp->xsz;
mpinetcdf.c:  offset = varp->begin;
mpinetcdf.c:    ndims = varp->ndims;
mpinetcdf.c:      blocklen = varp->dsizes[1] * varp->xsz;
mpinetcdf.c:      blocklen = varp->xsz;
mpinetcdf.c:  offset = varp->begin;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:        if (ncp->recsize <= varp->len) {
mpinetcdf.c:          if (varp->ndims == 1) {
mpinetcdf.c:            shape[0] *= varp->xsz;
mpinetcdf.c:	    subcount[0] *= varp->xsz;
mpinetcdf.c:              shape[dim] = varp->shape[dim];
mpinetcdf.c:	    shape[dim] = varp->xsz * varp->shape[dim];
mpinetcdf.c:	    subcount[dim] = varp->xsz * count[dim];
mpinetcdf.c:	    substart[dim] = varp->xsz * start[dim];
mpinetcdf.c:          if (varp->ndims == 1) {
mpinetcdf.c:	    MPI_Type_hvector(subcount[0], varp->xsz, ncp->recsize,
mpinetcdf.c:	    MPI_Type_create_hvector(subcount[0], varp->xsz, ncp->recsize,
mpinetcdf.c:              shape[dim] = varp->shape[dim];
mpinetcdf.c:            shape[dim] = varp->xsz * varp->shape[dim];
mpinetcdf.c:            subcount[dim] = varp->xsz * count[dim];
mpinetcdf.c:            substart[dim] = varp->xsz * start[dim];
mpinetcdf.c:          shape[dim] = varp->shape[dim];
mpinetcdf.c:        shape[dim] = varp->xsz * varp->shape[dim];
mpinetcdf.c:        subcount[dim] = varp->xsz * count[dim];
mpinetcdf.c:        substart[dim] = varp->xsz * start[dim];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:  offset = varp->begin;
mpinetcdf.c:      blocklens[ndims - 1] = varp->xsz;
mpinetcdf.c:        blockstride[ndims - 1] = stride[ndims - 1] * varp->xsz;
mpinetcdf.c:        offset += start[ndims - 1] * varp->xsz;
mpinetcdf.c:            blockstride[dim - 1] = stride[dim - 1] * varp->dsizes[dim] * varp->xsz;
mpinetcdf.c:            offset += start[dim-1] * varp->dsizes[dim] * varp->xsz;
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  nbytes = nelems*varp->xsz; /* account for file bytes */
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(xbuf,  cbuf, 1, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  nbytes = nelems*varp->xsz; /* account for file bytes */
mpinetcdf.c:  if ( need_convert(varp->type, ptype) || need_swap(varp->type, ptype) ) {
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(cbuf, xbuf, 1, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  if (varp->ndims == 0)
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:  else if (varp->ndims > 1)
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  nbytes = nelems * varp->xsz;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(cbuf, xbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  if (varp->ndims == 0)
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:  else if (varp->ndims > 1)
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  nbytes = nelems * varp->xsz;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(xbuf, cbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:    if (varp->ndims > 1)
mpinetcdf.c:      newnumrecs = nelems / varp->dsizes[1];
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  if (varp->ndims == 0)
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:  else if (varp->ndims > 1)
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  nbytes = nelems * varp->xsz;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(cbuf, xbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(xbuf, cbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems; 
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(cbuf, xbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(xbuf, cbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(cbuf, xbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:	  stride_was_null=(long long int*)malloc(varp->ndims*sizeof(long long int));
mpinetcdf.c:	  for (dim=0; dim < varp->ndims; dim++) {
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(xbuf, cbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems; 
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(cbuf, xbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, datatype) ) {
mpinetcdf.c:    swapn(xbuf, cbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(cbuf, xbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  nbytes = nelems*varp->xsz; /* account for file bytes */
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(xbuf,  cbuf, 1, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  nbytes = nelems*varp->xsz; /* account for file bytes */
mpinetcdf.c:  if ( need_convert(varp->type, ptype) || need_swap(varp->type, ptype) ) {
mpinetcdf.c:  (*request)->vartype = varp->type;
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  if (varp->ndims == 0)
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:  else if (varp->ndims > 1)
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  nbytes = nelems * varp->xsz;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(xbuf, cbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:    if (varp->ndims > 1)
mpinetcdf.c:      newnumrecs = nelems / varp->dsizes[1];
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  if (varp->ndims == 0)
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:  else if (varp->ndims > 1)
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  nbytes = nelems * varp->xsz;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  (*request)->vartype = varp->type;
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, ptype) ) {
mpinetcdf.c:    swapn(xbuf, cbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  (*request)->vartype = varp->type;
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ) {
mpinetcdf.c:    switch( varp->type ) {
mpinetcdf.c:  } else if ( need_swap(varp->type, datatype) ) {
mpinetcdf.c:    swapn(xbuf, cbuf, nelems, ncmpix_len_nctype(varp->type));
mpinetcdf.c:  if ( echar(varp->type, ptype) )
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++) {
mpinetcdf.c:  nbytes = varp->xsz * nelems;
mpinetcdf.c:  if ( need_convert(varp->type, ptype) ||  need_swap(varp->type, ptype) ) {
mpinetcdf.c:  (*request)->vartype = varp->type;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  ndims = varp->ndims;
mpinetcdf.c:    nelems = varp->dsizes[0];
mpinetcdf.c:    nelems = ncp->numrecs * varp->dsizes[1];
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
mpinetcdf.c:  for (dim = 0; dim < varp->ndims; dim++)
validator.c:                              1, varp->dimids + dim);
validator.c:  status = val_get_NC_attrarray(gbp, &varp->attrs);
validator.c:  status = val_get_nc_type(gbp, &varp->type);
validator.c:  status = val_get_size_t(gbp, &varp->len);
validator.c:                         &varp->begin, (gbp->version == 1 ? 4 : 8));
var.c:	ncmpii_free_NC_attrarrayV(&varp->attrs);
var.c:	ncmpii_free_NC_string(varp->name);
var.c:	varp->name = strp;
var.c:	varp->ndims = ndims;
var.c:		varp->dimids = (int *)((char *)varp + M_RNDUP(sizeof(NC_var)));
var.c:		varp->shape = (long long int *)((char *)varp->dimids + o1);
var.c:		varp->dsizes = (long long int *)((char *)varp->shape + o2);
var.c:	varp->xsz = 0;
var.c:	varp->len = 0;
var.c:	varp->begin = 0;
var.c:	varp->type = type;
var.c:		(void) memcpy(varp->dimids, dimids, ndims * sizeof(int));
var.c:	NC_var *varp = ncmpii_new_NC_var(rvarp->name->cp, rvarp->type,
var.c:		 rvarp->ndims, rvarp->dimids);
var.c:	if(ncmpii_dup_NC_attrarrayV(&varp->attrs, &rvarp->attrs) != NC_NOERR)
var.c:	(void) memcpy(varp->shape, rvarp->shape,
var.c:			 rvarp->ndims * sizeof(long long int));
var.c:	(void) memcpy(varp->dsizes, rvarp->dsizes,
var.c:			 rvarp->ndims * sizeof(long long int));
var.c:	varp->xsz = rvarp->xsz;
var.c:	varp->len = rvarp->len;
var.c:	varp->begin = rvarp->begin;
var.c:	varp->xsz = ncx_szof(varp->type);
var.c:	if(varp->ndims == 0)
var.c:	for(ip = varp->dimids, op = varp->shape
var.c:		; ip < &varp->dimids[varp->ndims]; ip++, op++)
var.c:		if(*op == NC_UNLIMITED && ip != varp->dimids)
var.c:	for(shp = varp->shape + varp->ndims -1,
var.c:				dsp = varp->dsizes + varp->ndims -1;
var.c: 			shp >= varp->shape;
var.c:		if(!(shp == varp->shape && IS_RECVAR(varp)))
var.c:	if (varp->xsz <= X_UINT_MAX / product) /* if int. mult won't overflow */
var.c:		varp->len = product * varp->xsz;
var.c:		varp->len = X_UINT_MAX;
var.c:	switch(varp->type) {
var.c:		if( varp->len%4 != 0 )
var.c:			varp->len += 4 - varp->len%4; /* round up */
var.c:	arrayp("\tshape", varp->ndims, varp->shape);
var.c:	arrayp("\tdsizes", varp->ndims, varp->dsizes);
var.c:    long long int prod=varp->xsz;     /* product of xsz and dimensions so far */
var.c:    for(ii = IS_RECVAR(varp) ? 1 : 0; ii < varp->ndims; ii++) {
var.c:       if (varp->shape[ii] > vlen_max / prod) {
var.c:       prod *= varp->shape[ii];
var.c:		(void) strncpy(name, varp->name->cp, varp->name->nchars);
var.c:		name[varp->name->nchars] = 0;
var.c:		*typep = varp->type;
var.c:		*ndimsp = (int) varp->ndims;
var.c:		for(ii = 0; ii < varp->ndims; ii++)
var.c:			dimids[ii] = varp->dimids[ii];
var.c:		*nattsp = (int) varp->attrs.nelems;
var.c:		(void) strncpy(name, varp->name->cp, varp->name->nchars);
var.c:		name[varp->name->nchars] = 0;
var.c:		*typep = varp->type;
var.c:		*ndimsp = (int) varp->ndims;
var.c:		for(ii = 0; ii < varp->ndims; ii++)
var.c:			dimids[ii] = varp->dimids[ii];
var.c:		*nattsp = (int) varp->attrs.nelems;
var.c:	old = varp->name;
var.c:		varp->name = newStr;
var.c:	status = ncmpii_set_NC_string(varp->name, newname);
