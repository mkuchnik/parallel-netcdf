AC_REVISION($Id$)dnl
dnl -*- Mode: shell-script-mode; -*-
dnl Process this file with GNU autoconf(1) to produce a configure script.
dnl

AC_PREREQ(2.59)
AC_INIT([parallel-netcdf], [1.4.0.pre1], [parallel-netcdf@mcs.anl.gov])
AC_CONFIG_AUX_DIR(./scripts)
AC_CONFIG_SRCDIR([src/lib/ncconfig.h.in])
dnl must be all on same line
AC_CONFIG_HEADER(src/lib/ncconfig.h src/libf/pnetcdf_inc src/libf/nfconfig.inc:src/libf/nfconfig.in)

dnl parse the version numbers to 4 env variables
saved_IFS=${IFS}
IFS=. read PNETCDF_VERSION_MAJOR PNETCDF_VERSION_MINOR PNETCDF_VERSION_SUB PNETCDF_VERSION_PRE <<< "$PACKAGE_VERSION"
IFS=${saved_IFS}

PNETCDF_VERSION="${PNETCDF_VERSION_MAJOR}.${PNETCDF_VERSION_MINOR}"
if test x${PNETCDF_VERSION_SUB} != x ; then
    PNETCDF_VERSION+=".${PNETCDF_VERSION_SUB}"
    if test x${PNETCDF_VERSION_PRE} != x ; then
        PNETCDF_VERSION+=".${PNETCDF_VERSION_PRE}"
    fi
fi

dnl user defined macro for printing messages for debugging
_DEBUG=no
AC_DEFUN([UD_MSG_DEBUG],
         [if test "x${_DEBUG}" = xyes ; then
             AC_MSG_NOTICE(DEBUG: $1)
          fi
         ]
)

UD_MSG_DEBUG([PNETCDF_VERSION_MAJOR=$PNETCDF_VERSION_MAJOR])
UD_MSG_DEBUG([PNETCDF_VERSION_MINOR=$PNETCDF_VERSION_MINOR])
UD_MSG_DEBUG([PNETCDF_VERSION_SUB=$PNETCDF_VERSION_SUB])
UD_MSG_DEBUG([PNETCDF_VERSION_PRE=$PNETCDF_VERSION_PRE])
UD_MSG_DEBUG([PNETCDF_VERSION=$PNETCDF_VERSION])

AC_DEFINE_UNQUOTED(PNETCDF_VERSION_MAJOR, $PNETCDF_VERSION_MAJOR, major version number)
AC_DEFINE_UNQUOTED(PNETCDF_VERSION_MINOR, $PNETCDF_VERSION_MINOR, minor version number)
AC_DEFINE_UNQUOTED(PNETCDF_VERSION_SUB, $PNETCDF_VERSION_SUB, sub version number)
AC_DEFINE_UNQUOTED(PNETCDF_VERSION_PRE, $PNETCDF_VERSION_PRE, pre-release string)
AC_DEFINE_UNQUOTED(PNETCDF_VERSION, ["$PNETCDF_VERSION"], full pnetcdf version string)

AC_SUBST(PNETCDF_VERSION_MAJOR)
AC_SUBST(PNETCDF_VERSION_MINOR)
AC_SUBST(PNETCDF_VERSION_SUB)
AC_SUBST(PNETCDF_VERSION_PRE)
AC_SUBST(PNETCDF_VERSION)

dnl these used to live in acconfig.h
AH_TEMPLATE([NCBYTE_T],                 [Type of NC_BYTE])
AH_TEMPLATE([NCSHORT_T],                [Type of NC_SHORT])
AH_TEMPLATE([NF_DOUBLEPRECISION_IS_C_], [C type for Fortran dobule])
AH_TEMPLATE([NF_INT1_IS_C_],            [C type for Fortran INT1])
AH_TEMPLATE([NF_INT1_T],                [Type for Fortran INT1])
AH_TEMPLATE([NF_INT2_IS_C_],            [C type for Fortran INT2])
AH_TEMPLATE([NF_INT2_T],                [Type for Fortran INT2])
AH_TEMPLATE([NF_INT_IS_C_],             [C type for Fortran INT])
AH_TEMPLATE([NF_INT8_IS_C_],            [C type for Fortran INT8])
AH_TEMPLATE([NF_INT8_T],                [Type for Fortran INT8])
AH_TEMPLATE([NF_REAL_IS_C_],            [C type for Fortran REAL])
AH_TEMPLATE([NO_IEEE_FLOAT],            [Does sytem have IEEE FLOAT])
AH_TEMPLATE([DISABLE_FILE_SYNC],        [Define if to disable MPI_File_sync])

dnl an option to use a customized rm command
if test "x${RM}" != x ; then
   AC_MSG_CHECKING(rm )
   if ! test -f ${RM} ; then
      AC_CHECK_PROG([rm_cmd], [${RM}], [yes], [no])
      if test "x${rm_cmd}" = xyes ; then
         RM=${RM}
      fi
   else
      RM=${RM}
   fi
   AC_MSG_RESULT(using $RM)
else
   RM="rm"
fi
AC_SUBST(RM)

AC_ARG_ENABLE(echo,
    [AS_HELP_STRING([--enable-echo],
                    [Turn on strong echoing. @<:@default: no@:>@])],
    [set -x]
)

MPI_INSTALL=
AC_ARG_WITH(mpi,
    [AS_HELP_STRING([--with-mpi=/path/to/implementation],
                    [installation prefix for MPI implementation])],
    if test x"$withval" = xyes; then
        AC_MSG_ERROR(--with-mpi must be given a pathname)
    else
        MPI_INSTALL=${withval}
    fi
)
if test "x${MPI_INSTALL}" != x && (! test -d "${MPI_INSTALL}") ; then
   AC_MSG_WARN(Directory '${MPI_INSTALL}' specified in --with-mpi does not exist)
fi

AC_DEFUN([UD_CHECK_MPI_COMPILER], [
   if test "x$MPI_INSTALL"  != x ; then
       UD_MSG_DEBUG(--with-mpi=$MPI_INSTALL is used)
       if test "x$$1" = x ; then
          UD_MSG_DEBUG(search possible $1 under MPI_INSTALL/bin)
          AC_PATH_PROGS([$1], [$2], [], [$MPI_INSTALL/bin])
       else
          UD_MSG_DEBUG(check if file $$1 exists)
          if ! test -f "$$1" ; then
             dnl file does not exist, check under MPI_INSTALL
             UD_MSG_DEBUG(File $1= $$1 cannot be found ... check under $MPI_INSTALL)
             if test -f "$MPI_INSTALL/bin/$$1" ; then
                UD_MSG_DEBUG(File $1= $$1 is found under $MPI_INSTALL/bin)
                $1="$MPI_INSTALL/bin/$$1"
             else
                UD_MSG_DEBUG(File $1= $$1 cannot be found under $MPI_INSTALL/bin)
                $1=
             fi
          fi
       fi
    else
       UD_MSG_DEBUG(--with-mpi=$MPI_INSTALL is NOT used)
       UD_MSG_DEBUG(check if $1 is defined. If yes, check if file exists)
       if test "x$$1" != x && (! test -f "$$1") ; then
          UD_MSG_DEBUG(check if file $$1 exists under user's PATH)
          AC_PATH_PROGS([$1], [$$1])
       fi
    fi
    dnl if $$1 is not empty, then compler file does exist
    dnl if $$1 is empty, search under user's PATH
    if test "x$$1" = x ; then
       UD_MSG_DEBUG(find possible $1 under user's PATH)
       AC_PATH_PROGS([$1], [$2])
    fi
])

CANDIDATE_MPICC="mpicc"
CANDIDATE_MPICXX="mpicxx mpic++ mpiCC"
CANDIDATE_MPICF77="mpif77"
CANDIDATE_MPICF90="mpif90"

dnl add IBM MPI compilers
CANDIDATE_MPICC+=" mpcc_r mpcc mpixlc_r mpixlc"
CANDIDATE_MPICXX+=" mpCC_r mpCC mpixlcxx_r mpixlcxx mpixlC_r mpixlC"
CANDIDATE_MPICF77+=" mpixlf77_r mpixlf77"
CANDIDATE_MPICF90+=" mpixlf90_r mpixlf90"

dnl add IBM BGL MPI compilers
CANDIDATE_MPICC+=" blrts_xlc mpxlc_r mpxlc"
CANDIDATE_MPICXX+=" blrts_xlC mpxlC_r mpxlC"
CANDIDATE_MPICF77+=" blrts_xlf mpxlf_r mpxlf"
CANDIDATE_MPICF90+=" blrts_xlf90 mpxlf90_r mpxlf90 mpxlf95_r mpxlf95"

dnl add Cray MPI compiler wrappers
CANDIDATE_MPICC+=" cc"
CANDIDATE_MPICXX+=" CC"
CANDIDATE_MPICF77+=" ftn"
CANDIDATE_MPICF90+=" ftn"

dnl add Intel MPI compiler wrappers
CANDIDATE_MPICC+=" mpiicc"
CANDIDATE_MPICXX+=" mpiicpc"
CANDIDATE_MPICF77+=" mpiifort mpiifc"
CANDIDATE_MPICF90+=" mpiifort mpiifc"

UD_CHECK_MPI_COMPILER([MPICC], [$CANDIDATE_MPICC])
if test "x${MPICC}" = x ; then
   AC_MSG_ERROR([
   -----------------------------------------------------------------------
    No MPI C compiler can be found. Parallel netCDF requires an MPI C
    compiler. Please specify the location of one either with the MPICC
    environment variable or the --with-mpi configure flag
   -----------------------------------------------------------------------])
fi

CC=${MPICC}
AC_SUBST(MPICC)

dnl Now MPICC is configured, let's do some basic compiler tests
AC_PROG_CC
UD_PROG_CC_MAKEDEPEND

AC_HEADER_STDC
AC_CHECK_HEADERS([malloc.h])

UD_CHECK_MPI_COMPILER([MPICXX], [$CANDIDATE_MPICXX])
if test "x${MPICXX}" = x ; then
    # still cannot find MPICC
    AC_MSG_WARN([No MPI C++ compiler is found ... disable C++ testing programs])
    has_mpicxx=no
else
    has_mpicxx=yes
    CXX=${MPICXX}
    AC_SUBST(MPICXX)

    dnl UD_PROG_CXX
    AC_PROG_CXX(${MPICXX})
    dnl autoconf 2.5.9 has not yet implemented AC_PROG_CXX_C_O
    dnl AC_PROG_CXX_C_O
fi

# check if MPICC works for basic MPI call: MPI_Comm_rank()
AC_CHECK_FUNC([MPI_Comm_rank], [],
   [AC_MSG_ERROR([
    ------------------------------------------------------------
     Invalid MPI compiler specified or detected: "${MPICC}"
     A working MPI compiler is required. Please specify the location
     of one either with the MPICC environment variable or the
     --with-mpi configure flag
    ------------------------------------------------------------])
])

AC_ARG_ENABLE([mpi-io-test],
    [AS_HELP_STRING([--disable-mpi-io-test],
                    [Disable check for MPI-IO support in MPI implementation,
                     if you know your MPI implementation has MPI-IO support
                     but the configure test fails to find it.
                     @<:@default: no@:>@])],
    [enable_mpi_io_test=${enableval}], [enable_mpi_io_test=yes]
)

if test "x${enable_mpi_io_test}" = xyes ; then
    AC_CHECK_FUNC([MPI_File_open], [],
           [AC_MSG_ERROR([
            ------------------------------------------------------------
             MPI implementation does not support MPI-IO
             PnetCDF requires MPI-IO support to work properly.
            ------------------------------------------------------------])]
    )
    if test "x${has_mpicxx}" = xyes ; then
       AC_LANG_PUSH(C++)
       AC_CHECK_FUNC([MPI_File_close], [],
              [has_mpicxx=no
               MPICXX=
               AC_MSG_WARN([
               ------------------------------------------------------------
                MPI C++ implementation does not support MPI-IO
                Disabling C++ testing programs
               ------------------------------------------------------------])]
       )
       AC_LANG_POP(C++)
    fi
fi
AC_SUBST(has_mpicxx)

dnl I took the "-ansi" off the CFLAGS for the strict case, as it was
dnl preventing PATH_MAX from being defined for some of the test files,
dnl and I was having a tough time figuring out how to get it back! -- RobR
dnl Note this must be done after the type of C compiler is determined
AC_ARG_ENABLE(strict,
    [AS_HELP_STRING([--enable-strict],
                    [Turn on strict debugging with gcc. @<:@default: no@:>@])],
    [enable_strict=${enableval}], [enable_strict=no]
)

if test "x${enable_strict}" = xyes; then
    if test "x${GCC}" = xyes; then
        CPPFLAGS+="-Wall -Wstrict-prototypes -Wmissing-prototypes -Wundef -Wpointer-arith -Wbad-function-cast"
        CXXCPPFLAGS+="-Wall -Wundef -Wpointer-arith"
    else
        AC_MSG_WARN([--enable-strict is for GNU compiler only])
    fi
fi
AC_SUBST(CXXCPPFLAGS)

AC_ARG_ENABLE(fortran,
    [AS_HELP_STRING([--disable-fortran],
                    [Turn off support for the Fortran interface,
                     if you only need the C interface. @<:@default: no@:>@])],
    [enable_fortran=${enableval}], [enable_fortran=auto]
)

if test "x${enable_fortran}" != xno ; then
    UD_CHECK_MPI_COMPILER([MPIF77], [$CANDIDATE_MPICF77])
    UD_CHECK_MPI_COMPILER([MPIF90], [$CANDIDATE_MPICF90])
fi
if test "x${enable_fortran}" = xyes ; then
   dnl user explicitly requests to build Fortran APIs
   if test "x${MPIF77}" = x && test "x${MPIF90}" = x ; then
      AC_MSG_ERROR([
         ------------------------------------------------------------
           Fortran support is explicitly requested, but configure
           cannot find a Fortran77 or Fortran90 compiler. Please
           specifiy the locations of the compilers either with the
           MPIF77 MPIF90 environment variables or the --with-mpi
           configure flag.
         ------------------------------------------------------------])
   fi
fi

dnl AC_MSG_NOTICE(enable_fortran=$enable_fortran)

dnl Check if MPIF90 is a valid MPI compiler
if test "x${MPIF90}" != x ; then
   FC=${MPIF90}
   dnl UD_PROG_FC
   AC_PROG_FC
   AC_LANG_PUSH([Fortran])

   dnl find compile flags for handling files with .F .F90 .f90 extensions
   AC_FC_SRCEXT([f90])
   AC_FC_SRCEXT([F])
   AC_FC_SRCEXT([F90])
   AC_SUBST(FCFLAGS_f90)
   AC_SUBST(FCFLAGS_F)
   AC_SUBST(FCFLAGS_F90)

   FPPFLAGS=${FPPFLAGS-}
   AC_SUBST(FPPFLAGS)

   AC_COMPILE_IFELSE([AC_LANG_CALL([],[MPI_Comm_rank])],
                     [valid_mpif90=yes],[valid_mpif90=no]
   )
   AC_LANG_POP([Fortran])
   if test "x${valid_mpif90}" = xno && test "x${enable_fortran}" = xyes ; then
      AC_MSG_ERROR([
         ------------------------------------------------------------
           Invalid MPI Fortran 90 compiler specified: "${MPIF90}"
           A working MPI compiler is required. Please specify the
           location of one either with the MPIF90 environment
           variable or the --with-mpi configure flag
         ------------------------------------------------------------])
   fi
fi

dnl Check if MPIF77 is a valid MPI compiler
if test "x${MPIF77}" != x ; then
   F77=${MPIF77}
   AC_PROG_F77
   AC_LANG_PUSH([Fortran 77])
   AC_COMPILE_IFELSE([AC_LANG_CALL([],[MPI_Comm_rank])],
                     [valid_mpif77=yes],[valid_mpif77=no]
   )
   AC_LANG_POP([Fortran 77])
   if test "x${valid_mpif77}" = xno && test "x${enable_fortran}" = xyes ; then
      AC_MSG_ERROR([
         ------------------------------------------------------------
           Invalid MPI Fortran 77 compiler specified: "${MPIF77}"
           A working MPI compiler is required. Please specify the
           location of one either with the MPIF77 environment
           variable or the --with-mpi configure flag
         ------------------------------------------------------------])
   fi
fi

if test "x${enable_fortran}" = xauto ; then
   if test "x${valid_mpif77}" = xyes && test "x${valid_mpif90}" = xyes ; then
      enable_fortran=yes
   else
      enable_fortran=no
      AC_MSG_WARN([
         ------------------------------------------------------------
           Either MPI Fortran 77 or 90 compiler is not working:
               "MPIF77 = ${MPIF77}"
               "MPIF90 = ${MPIF90}"
           Disable Fortran feature ...
         ------------------------------------------------------------])
   fi
fi

if test "x${enable_fortran}" = xyes ; then
    # Checking for Fortran types also determines the Fortran name mangling
    # and places the value into FCALLSCSUB as a the C name corresponding
    # to the Fortran name SUB 
    AC_FC_FUNC(sub, [FCALLSCSUB])

    # determine the correct name mapping
    case $FCALLSCSUB in
       SUB)
           AC_DEFINE(F77_NAME_UPPER,,[Define if Fortran names are uppercase])
           ;;
       sub_)
           # This is the hard case.  Gcc uses one _ unless the name includes
           # an underscore, in which case it gets two trailing underscores.
           # Use essentially the same configure code that the original configure
           # used to determine SUB
           AC_MSG_CHECKING(for C-equivalent to Fortran routine \"SUB_A\") 
                   dnl "
           AC_FC_FUNC(sub_a, [FCALLSCSUBA])
           AC_MSG_RESULT($FCALLSCSUBA)
           case $FCALLSCSUBA in
               sub_a__)
                   AC_DEFINE(F77_NAME_LOWER_2USCORE,,[Define if Fortran names are lower case with two trailing underscore2])
                   ;;
               sub_a_)
                   AC_DEFINE(F77_NAME_LOWER_USCORE,,[Define if Fortran names are lower case with one trailing underscore])
                   ;;
               *)
                   AC_MSG_WARN([Unrecognized Fortran name mapping])
                   ;;
           esac
           ;;
       sub)
           AC_DEFINE(F77_NAME_LOWER,,[Define if Fortran names are lower case])
           ;;
       *)
           AC_MSG_WARN([Unrecognized Fortran name mapping])
           ;;
    esac

    AC_SUBST(MPIF77)
    AC_SUBST(MPIF90)
fi

AC_PROG_INSTALL
AC_PROG_YACC
AC_PROG_LEX
AC_PROG_AWK
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_EGREP

dnl AC_PROG_SED and AC_PROG_GREP are only available on autoconf 2.60 and later
dnl AC_PROG_SED
dnl AC_PROG_GREP

dnl YACC and LEX are required to build PnetCDF
dnl if configure finds bison then YACC is set to bison -y, so we need to clean
dnl up the output a bit before testing 
dnl Below checks commands yacc and lex availability under PATH. However, this
dnl checking is redundant, as AC_PROG_* did that already
dnl YACC_CMD="${YACC% *}"
dnl AC_CHECK_PROG([yacc_cmd], [${YACC_CMD}], [yes], [no])
dnl AC_CHECK_PROG([lex_cmd],  [${LEX}],      [yes], [no])
dnl if test "x${yacc_cmd}" = no ; then
dnl     AC_MSG_ERROR([could not find bison/yacc required by PnetCDF])
dnl fi
dnl if test "x${lex_cmd}" = no ; then
dnl     AC_MSG_ERROR([could not find flex/lex required by PnetCDF])
dnl fi

UD_PROG_M4
UD_PROG_AR()
UD_PROG_NM()
# We could use the PAC check for ranlib (it also makes sure that ranlib works,
# which is not always true, particularly when GNU tools are installed on 
# a system that doesn't have (or need) ranlib
AC_PROG_RANLIB

# Check for <stdbool.h> that conforms to C99 requirements
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE

AC_STRUCT_ST_BLKSIZE
UD_CHECK_IEEE

dnl cross compile fails with undefined reference to rpl_realloc and rpl_malloc
dnl AC_FUNC_MALLOC
dnl AC_FUNC_REALLOC

AC_FUNC_ERROR_AT_LINE
AC_FUNC_MEMCMP
AC_FUNC_STRTOD
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([memset setlocale sqrt strchr strerror strrchr strtol access])
dnl AC_CHECK_LIB([m], [tanh])
UD_CHECK_LIB_MATH

AC_CHECK_TYPE([MPI_Offset], [], [], [#include <mpi.h>])
if test "x${ac_cv_type_MPI_Offset}" = xyes; then
    AC_CHECK_SIZEOF([MPI_Offset], [], [#include <mpi.h>])
else
    AC_MSG_ERROR([Unable to find type MPI_Offset in mpi.h])
fi
AC_CHECK_SIZEOF([MPI_Aint], [], [#include <mpi.h>])

dnl ok, now we know how big MPI_Offset is.  If it's less than 8 bytes 
dnl we have to disable the new "CDF-5" (variables larger than 4gb) support
if test "$ac_cv_sizeof_MPI_Offset" -lt "8"; then
        AC_MSG_WARN("Unable to support CDF-5 format");
        enable_cdf5=no
else
        AC_DEFINE(ENABLE_CDF5,,[Define if able to support CDF-5 file format])
        enable_cdf5=yes
fi

dnl the nonblocking routines build up lists of requests with MPI_Type_struct.
dnl If MPI_Offset not the same size as MPI_Aint, the arrays passed around will
dnl get mangled. 
if test "$ac_cv_sizeof_MPI_Offset" -ne "$ac_cv_sizeof_MPI_Aint"; then
        AC_MSG_WARN(MPI_Offset and MPI_Aint have different sizes: non-blocking APIs now behave like blocking ones)
        enable_nonblocking=no
else
        AC_DEFINE(ENABLE_NONBLOCKING,,[Define if able to support nonblocking routines])
        enable_nonblocking=yes
fi

# check for MPI-2 only functions
AC_CHECK_FUNCS(MPI_Info_dup MPI_Info_free MPI_Get_address,,)

dnl Check for presence of an MPI constant.
dnl These could be enums, so we have to do compile checks.
AC_DEFUN([UD_HAS_MPI_CONST], [
   AC_MSG_CHECKING(if MPI constant $1 is defined )
   AC_COMPILE_IFELSE(
      [AC_LANG_SOURCE([
          #include <mpi.h>
          int dummy = $1;
      ])],
      [AC_MSG_RESULT(yes)
       AC_DEFINE(HAVE_$1, 1, available)
      ],
      [AC_MSG_RESULT(no)]
   )]
)

dnl Check for presence of MPI COMBINERS.
UD_HAS_MPI_CONST(MPI_COMBINER_DUP)
UD_HAS_MPI_CONST(MPI_COMBINER_HVECTOR_INTEGER)
UD_HAS_MPI_CONST(MPI_COMBINER_HINDEXED_INTEGER)
UD_HAS_MPI_CONST(MPI_COMBINER_SUBARRAY)
UD_HAS_MPI_CONST(MPI_COMBINER_DARRAY)
UD_HAS_MPI_CONST(MPI_COMBINER_RESIZED)
UD_HAS_MPI_CONST(MPI_COMBINER_STRUCT_INTEGER)
UD_HAS_MPI_CONST(MPI_COMBINER_INDEXED_BLOCK)
UD_HAS_MPI_CONST(MPI_COMBINER_F90_REAL)
UD_HAS_MPI_CONST(MPI_COMBINER_F90_INTEGER)
UD_HAS_MPI_CONST(MPI_COMBINER_F90_COMPLEX)

dnl Check for presence of various MPI error classes.
dnl These could be enums, so we have to do compile checks.
UD_HAS_MPI_CONST(MPI_ERR_FILE_EXISTS)
UD_HAS_MPI_CONST(MPI_ERR_NO_SUCH_FILE)

dnl Check for presence of an MPI datatype.
dnl These could be enums, so we have to do compile checks.
AC_DEFUN([UD_HAS_MPI_DATATYPE], [
   AC_MSG_CHECKING(if MPI datatype $1 is defined )
   AC_COMPILE_IFELSE(
      [AC_LANG_SOURCE([
          #include <mpi.h>
          MPI_Datatype dummy = $1;
      ])],
      [AC_MSG_RESULT(yes)
       AC_DEFINE(HAVE_$1, 1, available)
      ],
      [AC_MSG_RESULT(no)]
   )]
)

dnl Check for presence of C types
UD_HAS_MPI_DATATYPE(MPI_CHAR)
UD_HAS_MPI_DATATYPE(MPI_BYTE)
UD_HAS_MPI_DATATYPE(MPI_UNSIGNED_CHAR)
UD_HAS_MPI_DATATYPE(MPI_SHORT)
UD_HAS_MPI_DATATYPE(MPI_UNSIGNED_SHORT)
UD_HAS_MPI_DATATYPE(MPI_INT)
UD_HAS_MPI_DATATYPE(MPI_UNSIGNED)
UD_HAS_MPI_DATATYPE(MPI_LONG)
UD_HAS_MPI_DATATYPE(MPI_FLOAT)
UD_HAS_MPI_DATATYPE(MPI_DOUBLE)
UD_HAS_MPI_DATATYPE(MPI_LONG_LONG_INT)
UD_HAS_MPI_DATATYPE(MPI_UNSIGNED_LONG_LONG)
UD_HAS_MPI_DATATYPE(MPI_UB)
UD_HAS_MPI_DATATYPE(MPI_LB)
dnl UD_HAS_MPI_DATATYPE(MPI_OFFSET)
dnl HAVE_MPI_OFFSET might have already been defined in mpi.h

dnl Check for presence of Fortran types
dnl These could be enums, so we have to do compile checks.
dnl
dnl We do this for a couple of reasons.  First, the MPI might have been
dnl built without Fortran support, in which case these types might not
dnl exist.  Second, we need to map these types to corresponding C types
dnl where possible to simplify processing at runtime.
if test "$enable_fortran" = yes ; then
    UD_HAS_MPI_DATATYPE(MPI_CHARACTER)
    UD_HAS_MPI_DATATYPE(MPI_REAL)
    UD_HAS_MPI_DATATYPE(MPI_INTEGER)
    UD_HAS_MPI_DATATYPE(MPI_DOUBLE_PRECISION)
    UD_HAS_MPI_DATATYPE(MPI_INTEGER1)
    UD_HAS_MPI_DATATYPE(MPI_INTEGER2)
    UD_HAS_MPI_DATATYPE(MPI_INTEGER4)
    UD_HAS_MPI_DATATYPE(MPI_INTEGER8)
    UD_HAS_MPI_DATATYPE(MPI_INTEGER16)
    UD_HAS_MPI_DATATYPE(MPI_REAL4)
    UD_HAS_MPI_DATATYPE(MPI_REAL8)
    UD_HAS_MPI_DATATYPE(MPI_REAL16)
    UD_HAS_MPI_DATATYPE(MPI_COMPLEX8)
    UD_HAS_MPI_DATATYPE(MPI_COMPLEX16)
    UD_HAS_MPI_DATATYPE(MPI_COMPLEX32)
fi

AC_C_CHAR_UNSIGNED
AC_C_BIGENDIAN

AC_TYPE_SIGNAL
AC_TYPE_SIZE_T
AC_TYPE_OFF_T
AC_CHECK_TYPES([ssize_t, ptrdiff_t, uchar, ushort, uint, int64, uint64])

AC_CHECK_SIZEOF(size_t)
AC_CHECK_SIZEOF(off_t)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(ushort)
AC_CHECK_SIZEOF(uint)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(unsigned long long)

if test "$enable_fortran" = yes ; then
    if test "$cross_compiling" = yes; then
        UD_CHECK_FORTRAN_TYPE(NF_INT1_T, byte integer*1 "integer(kind=1)")
        UD_CHECK_FORTRAN_TYPE(NF_INT2_T, integer*2 "integer(kind=2)")
        UD_CHECK_FORTRAN_TYPE(NF_INT8_T, integer*8 "integer(kind=8)")
    else
        UD_FORTRAN_TYPES
    fi

    NFMPI_OFFSET="integer*$ac_cv_sizeof_MPI_Offset"
    AC_MSG_CHECKING(for Fortran NFMPI_OFFSET \"$NFMPI_OFFSET\")
    dnl "
    AC_LANG_PUSH([Fortran 77])
    AC_COMPILE_IFELSE(
        [AC_LANG_SOURCE([
            subroutine sub(value)
            $NFMPI_OFFSET value
            end
        ])],
        [ac_cv_NFMPI_OFFSET=yes], [ac_cv_NFMPI_OFFSET=no]
    )
    AC_LANG_POP([Fortran 77])
    if test "$ac_cv_NFMPI_OFFSET" = yes ; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
        AC_MSG_ERROR(F77 does not support \"$NFMPI_OFFSET\")
        dnl "
    fi
    ${RM} -rf conftest*
fi

has_fortran=$enable_fortran
AC_SUBST(has_fortran)

UD_MAKEWHATIS

AC_SYS_LARGEFILE

dnl
dnl After all other tests, optionally enable coverage.  we do this last
dnl because legend has it that sometimes on some compilers the coverage flags
dnl mess up other checks
dnl

AC_ARG_ENABLE(coverage,
              [AS_HELP_STRING([--enable-coverage],
                      [Compile with coverage support (gcc-based only)])],
                      CFLAGS+=" -pg -fprofile-arcs -ftest-coverage --coverage -O0"
                      FFLAGS+=" -pg -fprofile-arcs -ftest-coverage --coverage -O0"
                      LIBS+=" -lgcov",
                      [])

chmod u+x ${srcdir}/scripts/install-sh

AC_PATH_PROG([LATEX],  [latex])
AC_PATH_PROG([DVIPDF], [dvipdf])
has_latex=no
if test "x${LATEX}" != x ; then
    has_latex=yes
fi
AC_SUBST(LATEX)
AC_SUBST(DVIPDF)
AC_SUBST(has_latex)

BUILDDIR=$PWD
AC_SUBST(BUILDDIR)

AC_ARG_ENABLE([file-sync],
    [AS_HELP_STRING([--disable-file-sync],
                    [Disable MPI file sync if you know your file system can
                     provide data consistency. @<:@default: no@:>@])],
    [file_sync=${enableval}], [file_sync=yes]
)
if test "x${file_sync}" = xno ; then
    AC_DEFINE(DISABLE_FILE_SYNC)
fi

AC_CONFIG_FILES(macros.make
                Makefile
                src/Makefile
                src/lib/Makefile
                src/lib/pnetcdf.h
                src/libf/Makefile
                src/utils/Makefile
                src/utils/ncdump/Makefile
                src/utils/ncdiff/Makefile
                src/utils/ncgen/Makefile
                test/Makefile
                test/common/Makefile
                test/nc_test/Makefile
                test/nf_test/Makefile
                test/C/Makefile
                test/test_int/Makefile
                test/test_float/Makefile
                test/test_double/Makefile
                test/test_double_int/Makefile
                test/test_dtype/Makefile
                test/fandc/Makefile
                test/testcases/Makefile
                test/nonblocking/Makefile
                test/test_check_header/Makefile
                test/test_inq_format/Makefile
                test/largefile/Makefile
                test/data/Makefile
                examples/tutorial/Makefile
                examples/Makefile
                doc/Makefile
                man/Makefile
                benchmarks/Makefile)

AC_OUTPUT
echo "--------------------------------------------------------------------"


# if test "$enable_fortran" = yes ; then
    dnl generate a fortran-friendly pnetcdf_inc nfconfig.inc
    dnl replace C comment starter '/*' with '!' in Fortran and
    dnl remove C comment starter '*/'
    # sed -e "s%/\*%!%g" -e "s%\*/%%g" <src/libf/pnetcdf_inc>pnetcdf_inc && mv pnetcdf_inc src/libf/pnetcdf_inc
    # sed -e "s%/\*%!%g" -e "s%\*/%%g" <src/libf/nfconfig.inc>nfconfig.inc && mv nfconfig.inc src/libf/nfconfig.inc
# fi

if test "x${enable_mpi_io_test}" = xno ; then
    AC_MSG_WARN([
       NOTE: disabling the MPI-IO test is a VERY bad idea.
       Please make sure you know what you are doing])
fi

msg_large_files=no
if test "$ac_cv_sizeof_off_t" -gt 4 ; then
        msg_large_files=yes
fi

echo \
"
   ${PACKAGE_NAME} Version ${PACKAGE_VERSION}

   Features:  Support for large files (> 4 GB) - ${msg_large_files}
              Build Fortran APIs               - ${enable_fortran}
              Build nonblocking APIs           - ${enable_nonblocking}
              Build CDF-5 support              - ${enable_cdf5}

   Compilers: MPICC       = ${MPICC}
              MPICXX      = ${MPICXX}
              MPIF77      = ${MPIF77}
              MPIF90      = ${MPIF90}
              CFLAGS      = ${CFLAGS}
              FFLAGS      = ${FFLAGS}
              CPPFLAGS    = ${CPPFLAGS}
              CXXCPPFLAGS = ${CXXCPPFLAGS}
              LDFLAGS     = ${LDFLAGS}
              LIBS        = ${LIBS}

   Now type 'make @<:@<target>@:>@'
       where the optional <target> is:
           all              - build all binaries
           testing          - test PnetCDF build
           install          - install PnetCDF
---------------------------------------------------------------------"

