# Current notes

. On the SX, integer*1 does not exist, so no "int1" interfaces will be built.
  However, the declaration for the int1 functions still exist in pnetcdf.inc,
  which the compiler does not like.  Add -Wl"-h nodefs" to the FFLAGS
  environment variable to work around this problem.  In a future release, we
  will generate pnetcdf.inc 

. Our build process builds libpnetcdf.a from the objects in src/lib, then if
  the fortran interface is being built, adds the objects in src/libf to the
  already-existing library.  NEC's make implementation does not like this: it
  sees that the .a file is newer than the .f files and thus skips adding the
  object files to the library.

  To work around this, do the usual "configure; make", but then change to
  src/libf and run "make" a 2nd time.

# older notes
Date: Wed, 30 Jul 2003 16:59:46 +0200 (CEST)
From: rene.redler <redler@ccrl-nece.de>
To: Robert Latham <robl@mcs.anl.gov>
Cc: parallel-netcdf@mcs.anl.gov
Subject: first success story on NEC SX
Parts/Attachments:
   1 Shown     64 lines  Text
   2   OK    ~820 bytes  Text, ""
----------------------------------------


Hello,

  after some Makefile editing tests ran successfully on a SX.

> Could you tell me more about the 'other odd 
> things'?  It may drive me crazy, but we're going to try to get the 
> Makefiles to work with as many make implementations as possible. 
                                                                                
Starting again with version 0.8.7 it does not work when using the cross
compiler on a front end machine (in my case a Linux PC). When specifying
only MPIF77 and MPICC for using the cross compiler some configure test are
done by using the g++ on the Linux system, where in particular pointer
size do not match with those on the SX. When specifying CC and CXX with
the cross compiler the configure fails since the executable that are
generated for the SX cannot be executed on the Linux system.

On the SX the following environment variables have been defined 

MPIF77=mpif90
MPICC=mpic++
CC=c++
CXX=c++
ARFLAGS=r

...



