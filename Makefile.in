#
# Copyright (C) 2003, Northwestern University and Argonne National Laboratory
# See COPYRIGHT notice in top-level directory.
#
# $Id$
#
# @configure_input@

srcdir = @srcdir@
VPATH = @srcdir@

include macros.make


PACKAGE		= parallel-netcdf

DIST_GARBAGE	= \
		config.cache	\
		config.status	\
		config.log

PACKING_LIST	= \
		Makefile.in	\
		aclocal.m4	\
		configure	\
		configure.in	\
		macros.make.in	\
		macros.make.def	\
		rules.make \
		COPYRIGHT \
		CREDITS \
		INSTALL \
		README \
		README.AIX \
		README.bgl \
		README.bgp \
		README.bgq \
		README.CRAY \
		README.ifc_linux \
		README.IRIX64 \
		README.jazz \
		README.large_files \
		README.SP \
		README.SX \
		RELEASE_NOTES

PACKING_SUBDIRS	= \
		src \
		scripts \
		doc \
		man \
		benchmarks \
		examples \
		test

all:		src/all

install:	all src/install man/install

uninstall:	src/uninstall man/uninstall

clean:		src/clean \
                test/clean \
                examples/clean \
                benchmarks/clean \
                doc/clean \
                man/clean \
                scripts/clean

distclean:	src/distclean \
                test/distclean \
                examples/distclean \
                benchmarks/distclean \
                doc/distclean \
                man/distclean \
                scripts/distclean \
		clean_macros  \
		rmdir_src_dirs

tests: all
	@cd test && $(MAKE)

check testing: tests
	@cd test && $(MAKE) testing

verbose_check verbose_testing: tests
	@cd test && $(MAKE) verbose_testing

ptest: tests
	for i in test examples ; do ( cd $$i && $(MAKE) ptest ; ) ; done

clean_macros:
	@$(RM) -f macros.make

RMDIR_SRCDIRS = src test examples benchmarks doc man scripts

rmdir_src_dirs:
	@if ! [ $(srcdir) -ef `pwd` ] ; then set -e; for i in $(RMDIR_SRCDIRS); do ( rmdir $$i ; ) ; done; fi

# short names for making things in subdirs
src/all \
src/install \
src/uninstall \
test/clean \
test/distclean \
src/clean \
src/distclean \
examples/clean \
examples/distclean \
benchmarks/clean \
benchmarks/distclean \
doc/clean \
doc/distclean \
man/all \
man/clean \
man/distclean \
man/install \
man/uninstall \
scripts/clean \
scripts/distclean \
:
	@subdir=`echo $@ | $(SED) 's,/.*,,'`; \
	target=`echo $@ | $(SED) 's,.*/,,'`; \
	$(MAKE) SUBDIR=$$subdir TGET=$$target subdir_target

src/lib/test \
src/lib/install \
src/lib/uninstall \
src/utils/install \
src/utils/uninstall \
src/utils/clean \
examples/tutorial/clean \
examples/tutorial/distclean \
:
	@subdir=`dirname $@`; \
	target=`echo $@ | $(SED) 's/.*\///'`; \
	$(MAKE) SUBDIR=$$subdir TGET=$$target subdir_target

subdir_target:
	@cd $(SUBDIR) && $(MAKE) $(TGET) || exit 1

install:	whatis
whatis:		$(MANDIR)/$(WHATIS)
$(MANDIR)/$(WHATIS):	$(MANDIR)
	$(MAKEWHATIS_CMD)
uninstall:
	$(RM) -f $(MANDIR)/$(WHATIS)


################################################################################
# Distribution:

# The following rule checks to see that were on the right system.  If we're
# not, then the distribution mightn't contain the intended ncgen(1) (not
# to mention that dvips(1) is necessary for building the C++ User's Guide).
#
check_system:	FORCE
	@case "$(OVERRIDE)" in \
	'') case `uname -sr` in \
	    'SunOS 5'*) \
		exit 0;; \
	    *)  echo 1>&2 "Error: Not on a SunOS 5 system."; \
		echo 1>&2 "Set macro OVERRIDE to override."; \
		exit 1;; \
	    esac;; \
	*) exit 0;; \
	esac

# Make a compressed, tar(1) file of the source distribution in the current 
# directory.
#
tar.Z:		check_system FORCE
	$(MAKE) $(MFLAGS) $(PACKAGE)-$(PNETCDF_VERSION).tar.Z

dist: ensure_manifest MANIFEST
	id=$(PACKAGE)-$(PNETCDF_VERSION) \
	&& $(RM) -fr $$id \
	&& $(LN_S) $(srcdir) $$id \
	&& tar $(TARFLAGS) - `$(SED) "s|^|$$id/|" MANIFEST` | gzip  > $(PACKAGE)-$(PNETCDF_VERSION).tar.gz \
	&& tar $(TARFLAGS) - `$(SED) "s|^|$$id/|" MANIFEST` | bzip2 > $(PACKAGE)-$(PNETCDF_VERSION).tar.bz2 \
	&& $(RM) -f $$id MANIFEST

MANIFEST:	FORCE
	$(MAKE) -s MANIFEST.echo >$@

# Make a compressed, tar(1) file of the source distribution in the
# appropriate FTP directory.
#
# NOTE: Making "ftp" will cause the "tar.Z" file to be made even if it
# already exists.  This is because the MANIFEST file upon which it
# depends must be remade every time.  This is not a waste of time,
# however, if the "tar.Z" target is made in private directories and the
# "ftp" target is made in the "/upc/$(PACKAGE)/build/" directory.
#
ftp:		check_system FORCE
	$(MAKE) $(MFLAGS) $(FTPDIR)/$(PACKAGE)-$(PNETCDF_VERSION).tar.Z \
	test -r $(FTPDIR)/$(PACKAGE).tar.Z || exit 0; \
	    cd $(FTPDIR) || exit 1;

$(FTPDIR)/$(PACKAGE)-$(PNETCDF_VERSION).tar.Z:	$(PACKAGE)-$(PNETCDF_VERSION).tar.Z
	$(RM) -f $@
	cp $(PACKAGE)-$(PNETCDF_VERSION).tar.Z $@ 
	chmod u+rw,g+rw,o=r $@

# Make a compressed, tar(1) file of the binary distribution in the 
# appropriate FTP directory.
#
binftp:		FORCE
	$(MAKE) $(MFLAGS) $(FTPBINDIR)/$(PACKAGE)-$(PNETCDF_VERSION).tar.Z \

ftpbin:		binftp

$(FTPBINDIR)/$(PACKAGE)-$(PNETCDF_VERSION).tar.Z:
	$(RM) -f $@
	id=$(PACKAGE)-$(PNETCDF_VERSION) \
	&& $(RM) -f $$id \
	&& $(LN_S) $(prefix) $$id \
	&& tar $(TARFLAGS) - README $$id/bin $$id/include \
	    $$id/lib $$id/man | compress > $@ \
	&& $(RM) -f $$id
	chmod u+rw,g+rw,o=r $@
	test -r $(FTPBINDIR)/$(PACKAGE).tar.Z || exit 0; \
	    cd $(FTPBINDIR) || exit 1;


# rule for generating cscope information
cscope:
	find $(srcdir) -iname "*.[ch]" > $(srcdir)/cscope.files
	( cd $(srcdir); cscope -be -i $(srcdir)/cscope.files )

include $(srcdir)/rules.make
