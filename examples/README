#
# Copyright (C) 2012, Northwestern University and Argonne National Laboratory
# See COPYRIGHT notice in top-level directory.
#
# $Id$
#

This directory contains several example programs. An example run script
"run.csh" is provided, which can be customized with the desired MPI run
command and the number of MPI processes.


./tutorial
    A directory contains example programs that use different parallel I/O
    strategies, including:
        Parallel I/O from the master process
        Concurrent I/O on separate files
        Real parallel I/O on shared files
        Using "flexible" APIs
        Using non-blocking APIs
        Using non-blocking buffered write APIs

   Detailed descriptions for these programs can be found in
   http://trac.mcs.anl.gov/projects/parallel-netcdf/wiki/QuickTutorial


  ./C/block_cyclic.c
./CXX/block_cyclic.cpp
./F77/block_cyclic.f
./F90/block_cyclic.f90

    This example makes a number of nonblocking API calls, each to write a
    block of columns into a 2D integer variable in a file. In other words,
    data partitioning pattern is a block-cyclic along X dimension.
    The pattern is described by the rank IDs if run with 4 processes.

        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3,
        0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  1,  1,  2,  2,  3,  3 ;


./C/collective_write.c
./CXX/collective_write.cpp
    This example defined NUM_VARS 3D integer non-record variables in a file.
    All variables are partitioned among processes in a 3D block-block-block
    fashion. The I/O is carried out by making NUM_VARS calls to 
    ncmpi_put_vara_int_all(), one for each variable. Performance measurements
    are reported in the standard output.


  ./C/column_wise.c
./CXX/column_wise.cpp
./F77/column_wise.f
./F90/column_wise.f90
    This example makes a number of nonblocking API calls, each writes a single
    column of a 2D integer variable defined in a file. The data partitioning
    pattern among processes is a cyclic along dimension X, illustrated below
    by the process rank IDs if run with 4 processes

       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
       0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3 ;


  ./C/flexible_api.c
./CXX/flexible_api.cpp
./F77/flexible_api.f
./F90/flexible_api.f90
    This example shows how to use PnetCDF flexible APIs, ncmpi_put_vara_all()
    and ncmpi_iput_vara() to write two 2D array variables (one is of 4-byte
    integer byte and the other float type) in parallel.
    Local buffers have a ghost cell of length 3 surrounded along each
    dimension.


  ./C/get_info.c
./CXX/get_info.cpp
./F77/get_info.f
./F90/get_info.f90
    These two example programs print the PnetCDF and MPI-IO hints to the
    standard output.


  ./C/hints.c
./CXX/hints.cpp
./F77/hints.f
./F90/hints.f90
    This example sets two PnetCDF hints:
        nc_header_align_size and
        nc_var_align_size
    and prints the hint values, the header size, header extent, and
    variables' starting file offsets.


./C/mput.c
    This example shows how to use a single call of ncmpi_mput_vara_all() to
    write a sequence of requests with arbitrary array indices and lengths.
    It is intended to run on 4 processes. If more processes were allocated,
    the extra processes write zero-length requests. The offsets and lengths
    are just some random numbers to make the output look like:

        3, 3, 3, 1, 1, 0, 0, 2, 1, 1,
        0, 2, 2, 2, 3, 1, 1, 2, 2, 2,
        1, 1, 2, 3, 3, 3, 0, 0, 1, 1,
        0, 0, 0, 2, 1, 1, 1, 3, 3, 3 ;



  ./C/nonblocking_write.c
./CXX/nonblocking_write.cpp
./F77/nonblocking_write.f
./F90/nonblocking_write.f90
    This example is almost the same as to collective_write.c but using
    nonblocking APIs instead.


  ./C/put_vara.c
./CXX/put_vara.cpp
./F77/put_vara.f
./F90/put_var.f90
    This example shows how to use nfmpi_put_vara_int_all() to write a 2D
    4-byte integer array in parallel. The data partitioning pattern among
    processes is a *-block in Fortran order. It is described by the process
    rank IDs as below if run on 4 processes.

         0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,
         1, 1, 1, 1, 1,
         1, 1, 1, 1, 1,
         1, 1, 1, 1, 1,
         1, 1, 1, 1, 1,
         2, 2, 2, 2, 2,
         2, 2, 2, 2, 2,
         2, 2, 2, 2, 2,
         2, 2, 2, 2, 2,
         3, 3, 3, 3, 3,
         3, 3, 3, 3, 3,
         3, 3, 3, 3, 3,
         3, 3, 3, 3, 3 ;


  ./C/put_varn_float.c
./CXX/put_varn_float.cpp
./F77/put_varn_real.f
./F90/put_varn_real.f90
    This example makes a single call of ncmpi_put_varn_float_all() to write a
    sequence of one-element requests with arbitrary array indices. All
    subrequest indices, starts[], are within the boundaries of a single
    variable.  See comments at the beginning of the source file for compile,
    run instructions, and example output.


  ./C/put_varn_int.c
./CXX/put_varn_int.cpp
./F77/put_varn_int.f
./F90/put_varn_int.f90
    This example makes a single call of ncmpi_put_varn_int_all() to write a
    sequence of requests with arbitrary array indices and lengths. All
    subrequests (starts[] and counts[]) are within the boundaries of a single
    variable.  See comments at the beginning of the source file for compile,
    run instructions, and example output.


./C/create_open.c
    This example shows how to use to create a new file, close it, and
    open the file for read only.


./C/global_attributes.c
    This example creates a new file and add 2 global attributes, one is of text
    type and the other 10 short integers. The file is closed and re-opened to
    read back the attributes.

./C/get_vara.c
    This example is the read counterpart of example put_vara.c. It shows how to
    use ncmpi_get_vara_int_all() to read a 2D 4-byte integer array in parallel.
    It also reads a global attribute and two attribute of variable named "var".
    The data partitioning pattern is a column-wise partitioning across all
    proceses.

