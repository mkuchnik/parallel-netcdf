dnl Process this m4 file to produce 'C' language file.
dnl
dnl If you see this line, you can ignore the next one.
! Do not edit this file. It is produced from the corresponding .m4 source
dnl
!
!  Copyright (C) 2013, Northwestern University and Argonne National Laboratory
!  See COPYRIGHT notice in top-level directory.
!
! $Id$
!

dnl
dnl VAR1(ncid, varid, values, start, count)
dnl
define(`VAR1',dnl
`dnl
   function nf90mpi_$1_var_$2(ncid, varid, values, start)
     integer,                                                intent( in) :: ncid, varid
     $3 (kind=$2),                                           intent($5)  :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:), optional, intent( in) :: start

     integer                                                             :: nf90mpi_$1_var_$2
     integer (kind=MPI_OFFSET_KIND), dimension(nf90_max_var_dims)        :: localIndex
 
     ! Set local arguments to default values
     localIndex(:) = 1
     if(present(start)) localIndex(:size(start)) = start(:)
 
     nf90mpi_$1_var_$2 = nfmpi_$1_var1_$4(ncid, varid, localIndex, values)
   end function nf90mpi_$1_var_$2
')dnl

!
! Independent put APIs
!

VAR1(put, OneByteInt,    integer, int1,   in)
VAR1(put, TwoByteInt,    integer, int2,   inout)
VAR1(put, FourByteInt,   integer, int,    inout)
VAR1(put, FourByteReal,  real,    real,   inout)
VAR1(put, EightByteReal, real,    double, inout)
VAR1(put, EightByteInt,  integer, int8,   inout)

!
! Independent get APIs
!

VAR1(get, OneByteInt,    integer, int1,   out)
VAR1(get, TwoByteInt,    integer, int2,   out)
VAR1(get, FourByteInt,   integer, int,    out)
VAR1(get, FourByteReal,  real,    real,   out)
VAR1(get, EightByteReal, real,    double, out)
VAR1(get, EightByteInt,  integer, int8,   out)

dnl
dnl NBVAR1(ncid, varid, values, start, count, req)
dnl
define(`NBVAR1',dnl
`dnl
   function nf90mpi_$1_var_$2(ncid, varid, values, req, start)
     integer,                                                intent( in) :: ncid, varid
     integer,                                                intent(out) :: req
     $3 (kind=$2),                                            intent($5) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:), optional, intent( in) :: start

     integer                                                             :: nf90mpi_$1_var_$2
     integer (kind=MPI_OFFSET_KIND), dimension(nf90_max_var_dims)        :: localIndex
 
     ! Set local arguments to default values
     localIndex(:) = 1
     if(present(start)) localIndex(:size(start)) = start(:)
 
     nf90mpi_$1_var_$2 = nfmpi_$1_var1_$4(ncid, varid, localIndex, values, req)
   end function nf90mpi_$1_var_$2
')dnl

!
! Nonblocking iput APIs
!

NBVAR1(iput, OneByteInt,    integer, int1,   in)
NBVAR1(iput, TwoByteInt,    integer, int2,   inout)
NBVAR1(iput, FourByteInt,   integer, int,    inout)
NBVAR1(iput, FourByteReal,  real,    real,   inout)
NBVAR1(iput, EightByteReal, real,    double, inout)
NBVAR1(iput, EightByteInt,  integer, int8,   inout)

!
! Nonblocking iget APIs
!

NBVAR1(iget, OneByteInt,    integer, int1,   out)
NBVAR1(iget, TwoByteInt,    integer, int2,   out)
NBVAR1(iget, FourByteInt,   integer, int,    out)
NBVAR1(iget, FourByteReal,  real,    real,   out)
NBVAR1(iget, EightByteReal, real,    double, out)
NBVAR1(iget, EightByteInt,  integer, int8,   out)

!
! Nonblocking bput APIs
!

NBVAR1(bput, OneByteInt,    integer, int1,   in)
NBVAR1(bput, TwoByteInt,    integer, int2,   inout)
NBVAR1(bput, FourByteInt,   integer, int,    inout)
NBVAR1(bput, FourByteReal,  real,    real,   inout)
NBVAR1(bput, EightByteReal, real,    double, inout)
NBVAR1(bput, EightByteInt,  integer, int8,   inout)

dnl
dnl VAR(ncid, varid, values, start, count, stride, map)
dnl
define(`VAR',dnl
`dnl
   function nf90mpi_$1_var_$2_$3$8(ncid, varid, values, start, count, stride, map)
     integer,                                                  intent( in) :: ncid, varid
     $4 (kind=$3), dimension($6),                              intent( $7) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:), optional,   intent( in) :: start, count, stride, map
 
     integer                                                               :: nf90mpi_$1_var_$2_$3$8
     integer (kind=MPI_OFFSET_KIND), dimension(nf90_max_var_dims)          :: localStart, localCount, localStride, localMap
     integer                                                               :: numDims, counter
 
     ! Set local arguments to default values
     numDims                 = size(shape(values))
     localStart (:         ) = 1
     localCount (:numDims  ) = shape(values)
     localCount (numDims+1:) = 1
     localStride(:         ) = 1
     ! localMap   (:numDims  ) = (/ 1, (product(localCount(:counter)), counter = 1, numDims - 1) /)
     localMap(1) = 1
     do counter = 1, numDims - 1
        localMap(counter+1) = localMap(counter) * localCount(counter)
     enddo
 
     if(present(start))  localStart (:size(start) )  = start(:)
     if(present(count))  localCount (:size(count) )  = count(:)
     if(present(stride)) localStride(:size(stride)) = stride(:)
     if(present(map))  then
       localMap   (:size(map))    = map(:)
       nf90mpi_$1_var_$2_$3$8 = &
          nfmpi_$1_varm_$5$8(ncid, varid, localStart, localCount, localStride, localMap, values)
     else if(present(stride)) then
       nf90mpi_$1_var_$2_$3$8 = &
          nfmpi_$1_vars_$5$8(ncid, varid, localStart, localCount, localStride, values)
     else
       nf90mpi_$1_var_$2_$3$8 = &
          nfmpi_$1_vara_$5$8(ncid, varid, localStart, localCount, values)
     end if
   end function nf90mpi_$1_var_$2_$3$8
')dnl

!
! Independent put APIs
!

VAR(put, 1D, OneByteInt, integer, int1,  :,              in)
VAR(put, 2D, OneByteInt, integer, int1, `:,:',           in)
VAR(put, 3D, OneByteInt, integer, int1, `:,:,:',         in)
VAR(put, 4D, OneByteInt, integer, int1, `:,:,:,:',       in)
VAR(put, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     in)
VAR(put, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   in)
VAR(put, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', in)

VAR(put, 1D, TwoByteInt, integer, int2,  :,              inout)
VAR(put, 2D, TwoByteInt, integer, int2, `:,:',           inout)
VAR(put, 3D, TwoByteInt, integer, int2, `:,:,:',         inout)
VAR(put, 4D, TwoByteInt, integer, int2, `:,:,:,:',       inout)
VAR(put, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     inout)
VAR(put, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   inout)
VAR(put, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', inout)

VAR(put, 1D, FourByteInt, integer, int,  :,              inout)
VAR(put, 2D, FourByteInt, integer, int, `:,:',           inout)
VAR(put, 3D, FourByteInt, integer, int, `:,:,:',         inout)
VAR(put, 4D, FourByteInt, integer, int, `:,:,:,:',       inout)
VAR(put, 5D, FourByteInt, integer, int, `:,:,:,:,:',     inout)
VAR(put, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   inout)
VAR(put, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', inout)

VAR(put, 1D, FourByteReal, real,   real,  :,              inout)
VAR(put, 2D, FourByteReal, real,   real, `:,:',           inout)
VAR(put, 3D, FourByteReal, real,   real, `:,:,:',         inout)
VAR(put, 4D, FourByteReal, real,   real, `:,:,:,:',       inout)
VAR(put, 5D, FourByteReal, real,   real, `:,:,:,:,:',     inout)
VAR(put, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   inout)
VAR(put, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', inout)

VAR(put, 1D, EightByteReal, real, double,  :,              inout)
VAR(put, 2D, EightByteReal, real, double, `:,:',           inout)
VAR(put, 3D, EightByteReal, real, double, `:,:,:',         inout)
VAR(put, 4D, EightByteReal, real, double, `:,:,:,:',       inout)
VAR(put, 5D, EightByteReal, real, double, `:,:,:,:,:',     inout)
VAR(put, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   inout)
VAR(put, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', inout)

VAR(put, 1D, EightByteInt, integer, int8,  :,              inout)
VAR(put, 2D, EightByteInt, integer, int8, `:,:',           inout)
VAR(put, 3D, EightByteInt, integer, int8, `:,:,:',         inout)
VAR(put, 4D, EightByteInt, integer, int8, `:,:,:,:',       inout)
VAR(put, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     inout)
VAR(put, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   inout)
VAR(put, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', inout)

!
! Independent get APIs
!

VAR(get, 1D, OneByteInt, integer, int1,  :,              out)
VAR(get, 2D, OneByteInt, integer, int1, `:,:',           out)
VAR(get, 3D, OneByteInt, integer, int1, `:,:,:',         out)
VAR(get, 4D, OneByteInt, integer, int1, `:,:,:,:',       out)
VAR(get, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     out)
VAR(get, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   out)
VAR(get, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', out)

VAR(get, 1D, TwoByteInt, integer, int2,  :,              out)
VAR(get, 2D, TwoByteInt, integer, int2, `:,:',           out)
VAR(get, 3D, TwoByteInt, integer, int2, `:,:,:',         out)
VAR(get, 4D, TwoByteInt, integer, int2, `:,:,:,:',       out)
VAR(get, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     out)
VAR(get, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   out)
VAR(get, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', out)

VAR(get, 1D, FourByteInt, integer, int,  :,              out)
VAR(get, 2D, FourByteInt, integer, int, `:,:',           out)
VAR(get, 3D, FourByteInt, integer, int, `:,:,:',         out)
VAR(get, 4D, FourByteInt, integer, int, `:,:,:,:',       out)
VAR(get, 5D, FourByteInt, integer, int, `:,:,:,:,:',     out)
VAR(get, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   out)
VAR(get, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', out)

VAR(get, 1D, FourByteReal, real,   real,  :,              out)
VAR(get, 2D, FourByteReal, real,   real, `:,:',           out)
VAR(get, 3D, FourByteReal, real,   real, `:,:,:',         out)
VAR(get, 4D, FourByteReal, real,   real, `:,:,:,:',       out)
VAR(get, 5D, FourByteReal, real,   real, `:,:,:,:,:',     out)
VAR(get, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   out)
VAR(get, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', out)

VAR(get, 1D, EightByteReal, real, double,  :,              out)
VAR(get, 2D, EightByteReal, real, double, `:,:',           out)
VAR(get, 3D, EightByteReal, real, double, `:,:,:',         out)
VAR(get, 4D, EightByteReal, real, double, `:,:,:,:',       out)
VAR(get, 5D, EightByteReal, real, double, `:,:,:,:,:',     out)
VAR(get, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   out)
VAR(get, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', out)

VAR(get, 1D, EightByteInt, integer, int8,  :,              out)
VAR(get, 2D, EightByteInt, integer, int8, `:,:',           out)
VAR(get, 3D, EightByteInt, integer, int8, `:,:,:',         out)
VAR(get, 4D, EightByteInt, integer, int8, `:,:,:,:',       out)
VAR(get, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     out)
VAR(get, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   out)
VAR(get, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', out)

!
! collective put APIs
!

VAR(put, 1D, OneByteInt, integer, int1,  :,              in, _all)
VAR(put, 2D, OneByteInt, integer, int1, `:,:',           in, _all)
VAR(put, 3D, OneByteInt, integer, int1, `:,:,:',         in, _all)
VAR(put, 4D, OneByteInt, integer, int1, `:,:,:,:',       in, _all)
VAR(put, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     in, _all)
VAR(put, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   in, _all)
VAR(put, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', in, _all)

VAR(put, 1D, TwoByteInt, integer, int2,  :,              inout, _all)
VAR(put, 2D, TwoByteInt, integer, int2, `:,:',           inout, _all)
VAR(put, 3D, TwoByteInt, integer, int2, `:,:,:',         inout, _all)
VAR(put, 4D, TwoByteInt, integer, int2, `:,:,:,:',       inout, _all)
VAR(put, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     inout, _all)
VAR(put, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   inout, _all)
VAR(put, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', inout, _all)

VAR(put, 1D, FourByteInt, integer, int,  :,              inout, _all)
VAR(put, 2D, FourByteInt, integer, int, `:,:',           inout, _all)
VAR(put, 3D, FourByteInt, integer, int, `:,:,:',         inout, _all)
VAR(put, 4D, FourByteInt, integer, int, `:,:,:,:',       inout, _all)
VAR(put, 5D, FourByteInt, integer, int, `:,:,:,:,:',     inout, _all)
VAR(put, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   inout, _all)
VAR(put, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', inout, _all)

VAR(put, 1D, FourByteReal, real,   real,  :,              inout, _all)
VAR(put, 2D, FourByteReal, real,   real, `:,:',           inout, _all)
VAR(put, 3D, FourByteReal, real,   real, `:,:,:',         inout, _all)
VAR(put, 4D, FourByteReal, real,   real, `:,:,:,:',       inout, _all)
VAR(put, 5D, FourByteReal, real,   real, `:,:,:,:,:',     inout, _all)
VAR(put, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   inout, _all)
VAR(put, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', inout, _all)

VAR(put, 1D, EightByteReal, real, double,  :,              inout, _all)
VAR(put, 2D, EightByteReal, real, double, `:,:',           inout, _all)
VAR(put, 3D, EightByteReal, real, double, `:,:,:',         inout, _all)
VAR(put, 4D, EightByteReal, real, double, `:,:,:,:',       inout, _all)
VAR(put, 5D, EightByteReal, real, double, `:,:,:,:,:',     inout, _all)
VAR(put, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   inout, _all)
VAR(put, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', inout, _all)

VAR(put, 1D, EightByteInt, integer, int8,  :,              inout, _all)
VAR(put, 2D, EightByteInt, integer, int8, `:,:',           inout, _all)
VAR(put, 3D, EightByteInt, integer, int8, `:,:,:',         inout, _all)
VAR(put, 4D, EightByteInt, integer, int8, `:,:,:,:',       inout, _all)
VAR(put, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     inout, _all)
VAR(put, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   inout, _all)
VAR(put, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', inout, _all)
!
! collective get APIs
!

VAR(get, 1D, OneByteInt, integer, int1,  :,              out, _all)
VAR(get, 2D, OneByteInt, integer, int1, `:,:',           out, _all)
VAR(get, 3D, OneByteInt, integer, int1, `:,:,:',         out, _all)
VAR(get, 4D, OneByteInt, integer, int1, `:,:,:,:',       out, _all)
VAR(get, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     out, _all)
VAR(get, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   out, _all)
VAR(get, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', out, _all)

VAR(get, 1D, TwoByteInt, integer, int2,  :,              out, _all)
VAR(get, 2D, TwoByteInt, integer, int2, `:,:',           out, _all)
VAR(get, 3D, TwoByteInt, integer, int2, `:,:,:',         out, _all)
VAR(get, 4D, TwoByteInt, integer, int2, `:,:,:,:',       out, _all)
VAR(get, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     out, _all)
VAR(get, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   out, _all)
VAR(get, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', out, _all)

VAR(get, 1D, FourByteInt, integer, int,  :,              out, _all)
VAR(get, 2D, FourByteInt, integer, int, `:,:',           out, _all)
VAR(get, 3D, FourByteInt, integer, int, `:,:,:',         out, _all)
VAR(get, 4D, FourByteInt, integer, int, `:,:,:,:',       out, _all)
VAR(get, 5D, FourByteInt, integer, int, `:,:,:,:,:',     out, _all)
VAR(get, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   out, _all)
VAR(get, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', out, _all)

VAR(get, 1D, FourByteReal, real,   real,  :,              out, _all)
VAR(get, 2D, FourByteReal, real,   real, `:,:',           out, _all)
VAR(get, 3D, FourByteReal, real,   real, `:,:,:',         out, _all)
VAR(get, 4D, FourByteReal, real,   real, `:,:,:,:',       out, _all)
VAR(get, 5D, FourByteReal, real,   real, `:,:,:,:,:',     out, _all)
VAR(get, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   out, _all)
VAR(get, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', out, _all)

VAR(get, 1D, EightByteReal, real, double,  :,              out, _all)
VAR(get, 2D, EightByteReal, real, double, `:,:',           out, _all)
VAR(get, 3D, EightByteReal, real, double, `:,:,:',         out, _all)
VAR(get, 4D, EightByteReal, real, double, `:,:,:,:',       out, _all)
VAR(get, 5D, EightByteReal, real, double, `:,:,:,:,:',     out, _all)
VAR(get, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   out, _all)
VAR(get, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', out, _all)

VAR(get, 1D, EightByteInt, integer, int8,  :,              out, _all)
VAR(get, 2D, EightByteInt, integer, int8, `:,:',           out, _all)
VAR(get, 3D, EightByteInt, integer, int8, `:,:,:',         out, _all)
VAR(get, 4D, EightByteInt, integer, int8, `:,:,:,:',       out, _all)
VAR(get, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     out, _all)
VAR(get, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   out, _all)
VAR(get, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', out, _all)

!
! Nonblocking APIs
!

dnl
dnl NBVAR(ncid, varid, values, start, count, stride, map, req)
dnl
define(`NBVAR',dnl
`dnl
   function nf90mpi_$1_var_$2_$3(ncid, varid, values, req, start, count, stride, map)
     integer,                                                  intent( in) :: ncid, varid
     integer,                                                  intent(out) :: req
     $4 (kind=$3), dimension($6),                              intent( $7) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:), optional,   intent( in) :: start, count, stride, map
 
     integer                                                               :: nf90mpi_$1_var_$2_$3
     integer (kind=MPI_OFFSET_KIND), dimension(nf90_max_var_dims)          :: localStart, localCount, localStride, localMap
     integer                                                               :: numDims, counter
 
     ! Set local arguments to default values
     numDims                 = size(shape(values))
     localStart (:         ) = 1
     localCount (:numDims  ) = shape(values)
     localCount (numDims+1:) = 1
     localStride(:         ) = 1
     ! localMap   (:numDims  ) = (/ 1, (product(localCount(:counter)), counter = 1, numDims - 1) /)
     localMap(1) = 1
     do counter = 1, numDims - 1
        localMap(counter+1) = localMap(counter) * localCount(counter)
     enddo
 
     if(present(start))  localStart (:size(start) )  = start(:)
     if(present(count))  localCount (:size(count) )  = count(:)
     if(present(stride)) localStride(:size(stride)) = stride(:)
     if(present(map))  then
       localMap   (:size(map))    = map(:)
       nf90mpi_$1_var_$2_$3 = &
          nfmpi_$1_varm_$5(ncid, varid, localStart, localCount, localStride, localMap, values, req)
     else if(present(stride)) then
       nf90mpi_$1_var_$2_$3 = &
          nfmpi_$1_vars_$5(ncid, varid, localStart, localCount, localStride, values, req)
     else
       nf90mpi_$1_var_$2_$3 = &
          nfmpi_$1_vara_$5(ncid, varid, localStart, localCount, values, req)
     end if
   end function nf90mpi_$1_var_$2_$3
')dnl

!
! iput APIs
!

NBVAR(iput, 1D, OneByteInt, integer, int1,  :,              in)
NBVAR(iput, 2D, OneByteInt, integer, int1, `:,:',           in)
NBVAR(iput, 3D, OneByteInt, integer, int1, `:,:,:',         in)
NBVAR(iput, 4D, OneByteInt, integer, int1, `:,:,:,:',       in)
NBVAR(iput, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     in)
NBVAR(iput, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   in)
NBVAR(iput, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', in)

NBVAR(iput, 1D, TwoByteInt, integer, int2,  :,              inout)
NBVAR(iput, 2D, TwoByteInt, integer, int2, `:,:',           inout)
NBVAR(iput, 3D, TwoByteInt, integer, int2, `:,:,:',         inout)
NBVAR(iput, 4D, TwoByteInt, integer, int2, `:,:,:,:',       inout)
NBVAR(iput, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     inout)
NBVAR(iput, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   inout)
NBVAR(iput, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', inout)

NBVAR(iput, 1D, FourByteInt, integer, int,  :,              inout)
NBVAR(iput, 2D, FourByteInt, integer, int, `:,:',           inout)
NBVAR(iput, 3D, FourByteInt, integer, int, `:,:,:',         inout)
NBVAR(iput, 4D, FourByteInt, integer, int, `:,:,:,:',       inout)
NBVAR(iput, 5D, FourByteInt, integer, int, `:,:,:,:,:',     inout)
NBVAR(iput, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   inout)
NBVAR(iput, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', inout)

NBVAR(iput, 1D, FourByteReal, real,   real,  :,              inout)
NBVAR(iput, 2D, FourByteReal, real,   real, `:,:',           inout)
NBVAR(iput, 3D, FourByteReal, real,   real, `:,:,:',         inout)
NBVAR(iput, 4D, FourByteReal, real,   real, `:,:,:,:',       inout)
NBVAR(iput, 5D, FourByteReal, real,   real, `:,:,:,:,:',     inout)
NBVAR(iput, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   inout)
NBVAR(iput, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', inout)

NBVAR(iput, 1D, EightByteReal, real, double,  :,              inout)
NBVAR(iput, 2D, EightByteReal, real, double, `:,:',           inout)
NBVAR(iput, 3D, EightByteReal, real, double, `:,:,:',         inout)
NBVAR(iput, 4D, EightByteReal, real, double, `:,:,:,:',       inout)
NBVAR(iput, 5D, EightByteReal, real, double, `:,:,:,:,:',     inout)
NBVAR(iput, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   inout)
NBVAR(iput, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', inout)

NBVAR(iput, 1D, EightByteInt, integer, int8,  :,              inout)
NBVAR(iput, 2D, EightByteInt, integer, int8, `:,:',           inout)
NBVAR(iput, 3D, EightByteInt, integer, int8, `:,:,:',         inout)
NBVAR(iput, 4D, EightByteInt, integer, int8, `:,:,:,:',       inout)
NBVAR(iput, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     inout)
NBVAR(iput, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   inout)
NBVAR(iput, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', inout)

!
! iget APIs
!

NBVAR(iget, 1D, OneByteInt, integer, int1,  :,              out)
NBVAR(iget, 2D, OneByteInt, integer, int1, `:,:',           out)
NBVAR(iget, 3D, OneByteInt, integer, int1, `:,:,:',         out)
NBVAR(iget, 4D, OneByteInt, integer, int1, `:,:,:,:',       out)
NBVAR(iget, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     out)
NBVAR(iget, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   out)
NBVAR(iget, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', out)

NBVAR(iget, 1D, TwoByteInt, integer, int2,  :,              out)
NBVAR(iget, 2D, TwoByteInt, integer, int2, `:,:',           out)
NBVAR(iget, 3D, TwoByteInt, integer, int2, `:,:,:',         out)
NBVAR(iget, 4D, TwoByteInt, integer, int2, `:,:,:,:',       out)
NBVAR(iget, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     out)
NBVAR(iget, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   out)
NBVAR(iget, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', out)

NBVAR(iget, 1D, FourByteInt, integer, int,  :,              out)
NBVAR(iget, 2D, FourByteInt, integer, int, `:,:',           out)
NBVAR(iget, 3D, FourByteInt, integer, int, `:,:,:',         out)
NBVAR(iget, 4D, FourByteInt, integer, int, `:,:,:,:',       out)
NBVAR(iget, 5D, FourByteInt, integer, int, `:,:,:,:,:',     out)
NBVAR(iget, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   out)
NBVAR(iget, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', out)

NBVAR(iget, 1D, FourByteReal, real,   real,  :,              out)
NBVAR(iget, 2D, FourByteReal, real,   real, `:,:',           out)
NBVAR(iget, 3D, FourByteReal, real,   real, `:,:,:',         out)
NBVAR(iget, 4D, FourByteReal, real,   real, `:,:,:,:',       out)
NBVAR(iget, 5D, FourByteReal, real,   real, `:,:,:,:,:',     out)
NBVAR(iget, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   out)
NBVAR(iget, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', out)

NBVAR(iget, 1D, EightByteReal, real, double,  :,              out)
NBVAR(iget, 2D, EightByteReal, real, double, `:,:',           out)
NBVAR(iget, 3D, EightByteReal, real, double, `:,:,:',         out)
NBVAR(iget, 4D, EightByteReal, real, double, `:,:,:,:',       out)
NBVAR(iget, 5D, EightByteReal, real, double, `:,:,:,:,:',     out)
NBVAR(iget, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   out)
NBVAR(iget, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', out)

NBVAR(iget, 1D, EightByteInt, integer, int8,  :,              out)
NBVAR(iget, 2D, EightByteInt, integer, int8, `:,:',           out)
NBVAR(iget, 3D, EightByteInt, integer, int8, `:,:,:',         out)
NBVAR(iget, 4D, EightByteInt, integer, int8, `:,:,:,:',       out)
NBVAR(iget, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     out)
NBVAR(iget, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   out)
NBVAR(iget, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', out)

!
! bput APIs
!

NBVAR(bput, 1D, OneByteInt, integer, int1,  :,              in)
NBVAR(bput, 2D, OneByteInt, integer, int1, `:,:',           in)
NBVAR(bput, 3D, OneByteInt, integer, int1, `:,:,:',         in)
NBVAR(bput, 4D, OneByteInt, integer, int1, `:,:,:,:',       in)
NBVAR(bput, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     in)
NBVAR(bput, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   in)
NBVAR(bput, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', in)

NBVAR(bput, 1D, TwoByteInt, integer, int2,  :,              inout)
NBVAR(bput, 2D, TwoByteInt, integer, int2, `:,:',           inout)
NBVAR(bput, 3D, TwoByteInt, integer, int2, `:,:,:',         inout)
NBVAR(bput, 4D, TwoByteInt, integer, int2, `:,:,:,:',       inout)
NBVAR(bput, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     inout)
NBVAR(bput, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   inout)
NBVAR(bput, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', inout)

NBVAR(bput, 1D, FourByteInt, integer, int,  :,              inout)
NBVAR(bput, 2D, FourByteInt, integer, int, `:,:',           inout)
NBVAR(bput, 3D, FourByteInt, integer, int, `:,:,:',         inout)
NBVAR(bput, 4D, FourByteInt, integer, int, `:,:,:,:',       inout)
NBVAR(bput, 5D, FourByteInt, integer, int, `:,:,:,:,:',     inout)
NBVAR(bput, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   inout)
NBVAR(bput, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', inout)

NBVAR(bput, 1D, FourByteReal, real,   real,  :,              inout)
NBVAR(bput, 2D, FourByteReal, real,   real, `:,:',           inout)
NBVAR(bput, 3D, FourByteReal, real,   real, `:,:,:',         inout)
NBVAR(bput, 4D, FourByteReal, real,   real, `:,:,:,:',       inout)
NBVAR(bput, 5D, FourByteReal, real,   real, `:,:,:,:,:',     inout)
NBVAR(bput, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   inout)
NBVAR(bput, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', inout)

NBVAR(bput, 1D, EightByteReal, real, double,  :,              inout)
NBVAR(bput, 2D, EightByteReal, real, double, `:,:',           inout)
NBVAR(bput, 3D, EightByteReal, real, double, `:,:,:',         inout)
NBVAR(bput, 4D, EightByteReal, real, double, `:,:,:,:',       inout)
NBVAR(bput, 5D, EightByteReal, real, double, `:,:,:,:,:',     inout)
NBVAR(bput, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   inout)
NBVAR(bput, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', inout)

NBVAR(bput, 1D, EightByteInt, integer, int8,  :,              inout)
NBVAR(bput, 2D, EightByteInt, integer, int8, `:,:',           inout)
NBVAR(bput, 3D, EightByteInt, integer, int8, `:,:,:',         inout)
NBVAR(bput, 4D, EightByteInt, integer, int8, `:,:,:,:',       inout)
NBVAR(bput, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     inout)
NBVAR(bput, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   inout)
NBVAR(bput, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', inout)

!
! Other nonblocking control APIs
!

   function nf90mpi_wait(ncid, num, req, st)
     integer,               intent( in) :: ncid, num
     integer, dimension(:), intent( in) :: req
     integer, dimension(:), intent(out) :: st
     integer                            :: nf90mpi_wait
 
     nf90mpi_wait = nfmpi_wait(ncid, num, req, st)
   end function nf90mpi_wait

   function nf90mpi_wait_all(ncid, num, req, st)
     integer,               intent( in) :: ncid, num
     integer, dimension(:), intent( in) :: req
     integer, dimension(:), intent(out) :: st
     integer                            :: nf90mpi_wait_all
 
     nf90mpi_wait_all = nfmpi_wait_all(ncid, num, req, st)
   end function nf90mpi_wait_all

   function nf90mpi_cancel(ncid, num, req, st)
     integer,               intent( in) :: ncid, num
     integer, dimension(:), intent( in) :: req
     integer, dimension(:), intent(out) :: st
     integer                            :: nf90mpi_cancel
 
     nf90mpi_cancel = nfmpi_cancel(ncid, num, req, st)
   end function nf90mpi_cancel

   function nf90mpi_buffer_attach(ncid, bufsize)
     integer,                        intent( in) :: ncid
     integer (kind=MPI_OFFSET_KIND), intent( in) :: bufsize
     integer                                     :: nf90mpi_buffer_attach

     nf90mpi_buffer_attach = nfmpi_buffer_attach(ncid, bufsize)
   end function nf90mpi_buffer_attach

   function nf90mpi_inq_buffer_usage(ncid, usage)
     integer,                        intent( in) :: ncid
     integer (kind=MPI_OFFSET_KIND), intent(out) :: usage
     integer                                     :: nf90mpi_inq_buffer_usage

     nf90mpi_inq_buffer_usage = nfmpi_inq_buffer_usage(ncid, usage)
   end function nf90mpi_inq_buffer_usage

   function nf90mpi_buffer_detach(ncid)
     integer,                       intent( in) :: ncid
     integer                                    :: nf90mpi_buffer_detach

     nf90mpi_buffer_detach = nfmpi_buffer_detach(ncid)
   end function nf90mpi_buffer_detach

